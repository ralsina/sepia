crystal_doc_search_index_callback({"repository_name":"Sepia","body":"# Sepia\n\nSepia is a simple, file-system-based serialization library for Crystal. It provides two modules, `Sepia::Serializable` and `Sepia::Container`, to handle the persistence of objects to disk.\n\n## Core Concepts\n\n- **`Sepia::Serializable`**: Objects that include this module are serialized to a single file. The content of the file is determined by the object's `to_sepia` method. These objects are stored in a \"canonical\" location based on their class name and `sepia_id`.\n\n- **`Sepia::Container`**: Objects that include this module are serialized as directories. They can contain other `Serializable` or `Container` objects.\n  - Nested `Serializable` objects are stored as symlinks to their canonical file.\n  - Nested `Container` objects are stored as subdirectories, creating a nested on-disk structure that mirrors the object hierarchy.\n  - **Automatic JSON Serialization**: Primitive properties (String, Int32, Bool, Time, etc.) are automatically serialized to a `data.json` file without requiring custom methods.\n\n## Documentation\n\nAPI documentation can be found at [crystaldoc.info/github/ralsina/sepia/](https://crystaldoc.info/github/ralsina/sepia/)\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     sepia:\n       github: ralsina/sepia\n   ```\n\n2. Run `shards install`\n\n## Storage Backends\n\nSepia supports pluggable storage backends. Two backends are currently available:\n\n- **`:filesystem`**: The default backend, which stores objects on the local filesystem. This is the original Sepia behavior.\n- **`:memory`**: An in-memory backend, useful for testing or for temporary, non-persistent data.\n\nYou can configure the storage backend using `Sepia::Storage.configure`.\n\n## Garbage Collection\n\nSepia includes a mark-and-sweep garbage collector (GC) to automatically find and delete orphaned objects from storage.\n\n### New Requirement: Inheriting from `Sepia::Object`\n\nTo enable garbage collection and other shared features, all classes that you intend to manage with Sepia **must** inherit from the `Sepia::Object` base class.\n\n```crystal\nclass MySerializable < Sepia::Object\n  include Sepia::Serializable\n  # ...\nend\n\nclass MyContainer < Sepia::Object\n  include Sepia::Container\n  # ...\nend\n```\n\n### How it Works\n\nThe garbage collector identifies \"live\" objects by starting from a set of \"root objects\" that you provide. It marks them and any object they reference (and so on recursively) as \"live\". Any object in storage that is not marked as live is considered an orphan and is deleted.\n\nTo run the collector, you must pass an `Enumerable` (like an `Array`) of the objects you consider to be the roots.\n\n```crystal\n# Assume my_app_roots is an array containing the top-level\n# objects that your application considers the starting point.\nmy_app_roots = [user1, user2, top_level_board]\n\n# Find and delete all orphaned objects\ndeleted_summary = Sepia::Storage.gc(roots: my_app_roots)\n\n# To get a report of what would be deleted without actually deleting anything:\norphans = Sepia::Storage.gc(roots: my_app_roots, dry_run: true)\n\n# To garbage collect everything, pass an empty array:\ndeleted_summary = Sepia::Storage.gc(roots: [] of Sepia::Object)\n```\n\n## Generation Tracking for Optimistic Concurrency Control\n\nSepia supports generation tracking to enable optimistic concurrency control and versioning of objects. This is particularly useful for collaborative applications where multiple users might edit the same data.\n\n### Key Concepts\n\n- **Generation Number**: Each object version has a generation number (0, 1, 2, etc.) encoded in its ID\n- **Base ID**: The unique identifier without the generation suffix\n- **Atomic Updates**: New versions are created as new files, never modifying existing ones\n- **Optimistic Locking**: Detect conflicts when multiple users try to save simultaneously\n\n### ID Format\n\nObjects use the format: `{type}-{uuid}.{generation}`\n\nExamples:\n- `note-123e4567-e89b-12d3-a456-426614174000.0` (initial version)\n- `note-123e4567-e89b-12d3-a456-426614174000.1` (first update)\n- `note-123e4567-e89b-12d3-a456-426614174000.2` (second update)\n\n### Core API\n\n```crystal\nclass Note < Sepia::Object\n  include Sepia::Serializable\n\n  property title : String\n  property content : String\n\n  def initialize(@title, @content)\n  end\n\n  def to_sepia : String\n    {title: @title, content: @content}.to_json\n  end\n\n  def self.from_sepia(json : String) : self\n    data = JSON.parse(json)\n    new(data[\"title\"].as_s, data[\"content\"].as_s)\n  end\nend\n\n# Create and save\nnote = Note.new(\"My Note\", \"Initial content\")\nnote.save  # Creates note-xxx.0\n\n# Create new version\nv2 = note.save_with_generation\n# v2.id is now note-xxx.1\n\n# Check current generation\nnote.generation      # => 0\nv2.generation        # => 1\n\n# Get base ID\nnote.base_id         # => \"note-xxx\"\nv2.base_id           # => \"note-xxx\"\n\n# Check for newer versions\nnote.stale?(0)       # => true (because v2 exists)\n\n# Find latest version\nlatest = Note.latest(\"note-xxx\")\nlatest.generation    # => 1\n\n# Get all versions\nversions = Note.versions(\"note-xxx\")\nversions.map(&.generation)  # => [0, 1]\n```\n\n### Conflict Resolution\n\n```crystal\n# User 1 loads note\nuser1_note = Note.load(\"note-xxx.1\")\n\n# User 2 loads same note\nuser2_note = Note.load(\"note-xxx.1\")\n\n# User 1 saves\nuser1_saved = user1_note.save_with_generation  # Creates note-xxx.2\n\n# User 2 tries to save\nif user2_note.stale?(1)\n  # Conflict! Reload and merge\n  latest = Note.latest(user2_note.base_id)\n  # Merge changes and save again\nelse\n  user2_saved = user2_note.save_with_generation\nend\n```\n\n### Backward Compatibility\n\nExisting objects without generation suffix are treated as generation 0 and continue to work seamlessly:\n\n```crystal\n# Legacy object\nold_note = Note.load(\"legacy-note\")\nold_note.generation  # => 0\nold_note.base_id     # => \"legacy-note\"\n```\n\n## Automatic JSON Serialization for Container Objects\n\n`Sepia::Container` now automatically handles JSON serialization for primitive properties, eliminating the need to write custom save/load methods for simple data types.\n\n### Supported Primitive Types\n\n- Basic types: `String`, `Int32`, `Int64`, `Float32`, `Float64`, `Bool`\n- Time types: `Time`\n- Collections of primitives: `Array`, `Set`, `Hash` (when containing primitive types)\n- Nilable versions of all above types\n\n### How It Works\n\n1. **Automatic Detection**: The Container module automatically identifies primitive instance variables at compile time\n2. **Filtered Serialization**: Only primitive properties are included in the JSON - Sepia objects and collections containing them are excluded\n3. **File Storage**: Primitive properties are stored in a `data.json` file within the container's directory\n4. **Type-Safe Parsing**: Each type is parsed using the appropriate method to ensure type safety\n\n### Example with Primitive Properties\n\n```crystal\nclass UserProfile < Sepia::Object\n  include Sepia::Container\n\n  # Primitive properties - automatically serialized to JSON\n  property name : String\n  property age : Int32\n  property active : Bool\n  property created_at : Time\n  property tags : Array(String)\n  property metadata : Hash(String, String)\n\n  # Sepia objects - handled via symlinks as before\n  property friends : Array(User)\n  property settings : UserSettings?\n\n  def initialize(@name = \"\", @age = 0, @active = false)\n    @created_at = Time.utc\n    @tags = [] of String\n    @metadata = {} of String => String\n    @friends = [] of User\n  end\nend\n```\n\nWhen you save and load a `UserProfile`, all primitive properties are automatically handled:\n\n```crystal\nprofile = UserProfile.new\nprofile.name = \"Alice\"\nprofile.age = 30\nprofile.active = true\nprofile.tags = [\"admin\", \"premium\"]\nprofile.metadata = {\"theme\" => \"dark\", \"locale\" => \"en_US\"}\n\n# Save - primitive properties automatically written to data.json\n# Sepia objects saved as symlinks\nprofile.save\n\n# Load - primitive properties automatically restored from data.json\nloaded = UserProfile.load(profile.sepia_id).as(UserProfile)\n\nputs loaded.name        # => \"Alice\"\nputs loaded.tags[0]      # => \"admin\"\nputs loaded.metadata     # => {\"theme\" => \"dark\", \"locale\" => \"en_US\"}\n```\n\n### On-Disk Structure with Primitives\n\n```\n./_data\n└── UserProfile\n    └── alice_profile\n        ├── data.json              # Primitive properties\n        ├── friends\n        │   └── 0000_bob -> ./_data/User/bob\n        └── settings -> ./_data/UserSettings/default\n```\n\nThe `data.json` file contains:\n```json\n{\n  \"name\": \"Alice\",\n  \"age\": 30,\n  \"active\": true,\n  \"created_at\": \"2024-01-15T10:30:00Z\",\n  \"tags\": [\"admin\", \"premium\"],\n  \"metadata\": {\"theme\": \"dark\", \"locale\": \"en_US\"}\n}\n```\n\n### Excluded Properties\n\nThe following are automatically excluded from JSON serialization:\n- Any property whose type inherits from `Sepia::Object`\n- Arrays containing `Sepia::Object` elements\n- Sets containing `Sepia::Object` elements\n- Hashes with `Sepia::Object` values\n- The `sepia_id` property (handled separately)\n\n### Backward Compatibility\n\nThis feature is fully backward compatible. Existing Container classes will continue to work exactly as before, with primitive properties simply gaining automatic serialization support.\n\n## Usage\n\nHere's a simple example demonstrating how to use `Sepia` to save and load a nested structure of \"Boards\" and \"Post-its\".\n\nFirst, configure the storage backend. For this example, we'll use the `:filesystem` backend to store data in a local `_data` directory.\n\n```crystal\nrequire \"sepia\"\n\n# Configure Sepia to use the filesystem backend.\nSepia::Storage.configure(:filesystem, {\"path\" => \"./_data\"})\n\n# A Postit is a simple Serializable object.\nclass Postit < Sepia::Object\n  include Sepia::Serializable\n\n  property text : String\n\n  def initialize(@text); end\n  def initialize; @text = \"\"; end\n\n  # The to_sepia method defines the content of the serialized file.\n  def to_sepia : String\n    @text\n  end\n\n  # The from_sepia class method defines how to deserialize the object.\n  def self.from_sepia(sepia_string : String) : self\n    new(sepia_string)\n  end\nend\n\n# A Board is a Container that can hold other Boards and Postits.\nclass Board < Sepia::Object\n  include Sepia::Container\n\n  # Primitive properties - automatically serialized\n  property name : String\n  property description : String?\n  property created_at : Time\n  property is_public : Bool = false\n\n  # Sepia object references - handled via symlinks\n  property boards : Array(Board)\n  property postits : Array(Postit)\n\n  def initialize(@name = \"\", @description = nil)\n    @created_at = Time.utc\n    @boards = [] of Board\n    @postits = [] of Postit\n  end\nend\n\n# --- Create and Save ---\n\n# A top-level board for \"Work\"\nwork_board = Board.new\nwork_board.sepia_id = \"work_board\"\nwork_board.name = \"Work\"\nwork_board.description = \"Work-related boards\"\nwork_board.is_public = false\n\n# A nested board for \"Project X\"\nproject_x_board = Board.new\nproject_x_board.sepia_id = \"project_x\" # This ID is only used for top-level objects\nproject_x_board.name = \"Project X\"\nproject_x_board.description = \"Tracking Project X progress\"\n\n# Create some Post-its\npostit1 = Postit.new(\"Finish the report\")\npostit1.sepia_id = \"report_postit\"\npostit2 = Postit.new(\"Review the code\")\npostit2.sepia_id = \"code_review_postit\"\n\n# Assemble the structure\nproject_x_board.postits << postit2\nwork_board.boards << project_x_board\nwork_board.postits << postit1\n\n# Save the top-level board. This will recursively save all its contents.\nwork_board.save\n\n# --- Load ---\n\nloaded_work_board = Board.load(\"work_board\").as(Board)\n\nputs loaded_work_board.postits[0].text # => \"Finish the report\"\nputs loaded_work_board.boards[0].postits[0].text # => \"Review the code\"\n```\n\n### On-Disk Representation\n\nAfter running the code above, the `_data` directory will have the following structure:\n\n```\n./_data\n├── Board\n│   └── work_board\n│       ├── data.json              # Primitive properties (name, description, etc.)\n│       ├── boards\n│       │   └── 0000_project_x     # Array elements are prefixed with index\n│       │       ├── data.json      # Primitive properties for project_x\n│       │       └── postits\n│       │           └── 0000_code_review_postit -> ./_data/Postit/code_review_postit\n│       └── postits\n│           └── 0000_report_postit -> ./_data/Postit/report_postit\n└── Postit\n    ├── code_review_postit\n    └── report_postit\n```\n\nNotice how:\n- The `work_board` and its nested `project_x` board are directories.\n- Each board directory contains a `data.json` file with primitive properties.\n- Array elements (like `boards` and `postits`) are stored in subdirectories with indexed prefixes (e.g., `0000_project_x`) to maintain order.\n- The `Postit` objects are stored in the canonical `Postit` directory and are referenced by symlinks.\n\nThe `data.json` for `work_board` would contain:\n```json\n{\n  \"name\": \"Work\",\n  \"description\": \"Work-related boards\",\n  \"created_at\": \"2024-01-15T10:30:00Z\",\n  \"is_public\": false\n}\n```\n\n## Development\n\nTo run the tests, clone the repository and run `crystal spec`.\n\n## Contributing\n\n1. Fork it (<https://github.com/ralsina/sepia/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Roberto Alsina](https://github.com/ralsina) - creator and maintainer\n","program":{"html_id":"Sepia/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"Sepia","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"Sepia/Sepia","path":"Sepia.html","kind":"module","full_name":"Sepia","name":"Sepia","abstract":false,"locations":[{"filename":"src/sepia.cr","line_number":274,"url":null},{"filename":"src/sepia/container.cr","line_number":3,"url":null},{"filename":"src/sepia/file_storage.cr","line_number":4,"url":null},{"filename":"src/sepia/generation_info.cr","line_number":1,"url":null},{"filename":"src/sepia/in_memory_storage.cr","line_number":3,"url":null},{"filename":"src/sepia/object.cr","line_number":3,"url":null},{"filename":"src/sepia/serializable.cr","line_number":1,"url":null},{"filename":"src/sepia/storage.cr","line_number":4,"url":null},{"filename":"src/sepia/storage_backend.cr","line_number":1,"url":null}],"repository_name":"Sepia","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"doc":"Sepia is a simple, file-system-based serialization library for Crystal.\nIt provides two main modules: `Sepia::Serializable` and `Sepia::Container`.\n\nDisk Storage Strategy:\n\n**1. Individual Objects:**\n\n- `Sepia::Serializable` objects: Stored as individual files in a directory\n  named after their class, using their `sepia_id` as the filename.\n\n  Example:\n\n```\nclass MySerializable\n  include Sepia::Serializable\n  property value : String\n\n  def initialize(@value); end\n\n  def to_sepia\n    @value\n  end\n\n  def self.from_sepia(s)\n    new(s)\n  end\nend\n\nmy_obj = MySerializable.new(\"hello\")\nmy_obj.sepia_id = \"my_obj_id\"\nmy_obj.save\n```\n\n\n  On-disk representation:\n\n```text\n_data/\n  └── MySerializable/\n      └── my_obj_id\n```\n\n- `Sepia::Container` objects: Stored as directories, also named after their\n  class and using their `sepia_id` as the directory name.\n\n  Example:\n\n```\nclass MyContainer\n  include Sepia::Container\nend\n\nmy_container = MyContainer.new\nmy_container.sepia_id = \"my_container_id\"\nmy_container.save\n```\n\n  On-disk representation:\n\n```text\n  _data/\n  └── MyContainer/\n      └── my_container_id/\n```\n\n**2. Nested Objects within Containers:**\n- Nested `Serializable` objects: Stored as symlinks to their canonical\n  `Serializable` file.\n\n  Example:\n\n```\nclass MyContainer\n  include Sepia::Container\n  property nested_serializable : MySerializable\n\n  def initialize(@nested_serializable); end\nend\n\nmy_serializable = MySerializable.new(\"nested\")\nmy_serializable.sepia_id = \"nested_serializable_id\"\nmy_container = MyContainer.new(my_serializable)\nmy_container.sepia_id = \"container_with_serializable\"\nmy_container.save\n```\n\n  On-disk representation:\n\n```text\n  _data/\n  ├── MyContainer/\n  │   └── container_with_serializable/\n  │       └── nested_serializable -> ../../MySerializable/nested_serializable_id\n  └── MySerializable/\n      └── nested_serializable_id\n```\n\n- Nested `Container` objects: Stored as subdirectories, mirroring the\n  object hierarchy on disk.\n\n  Example:\n\n```\nclass MyOuterContainer\n  include Sepia::Container\n  property inner_container : MyContainer\n\n  def initialize(@inner_container); end\nend\n\nclass MyInnerContainer\n  include Sepia::Container\nend\n\ninner = MyInnerContainer.new\ninner.sepia_id = \"inner_container_id\"\nouter = MyOuterContainer.new(inner)\nouter.sepia_id = \"outer_container_id\"\nouter.save\n```\n\n  On-disk representation:\n\n```text\n  _data/\n  └── MyOuterContainer/\n      └── outer_container_id/\n          └── inner_container/\n```\n\n**3. Collections within Containers:**\n- **Arrays/Sets of `Serializable` objects:** Stored in a subdirectory\n  named after the collection's instance variable. Each serializable object\n  is symlinked into that directory using its index as the filename.\n\n  #   Example:\n\n```\nclass MyContainerWithArray\n  include Sepia::Container\n  property serializables : Array(MySerializable)\n\n  def initialize(@serializables = [] of MySerializable); end\nend\n\ns1 = MySerializable.new(\"one\"); s1.sepia_id = \"s1_id\"\ns2 = MySerializable.new(\"two\"); s2.sepia_id = \"s2_id\"\ncontainer = MyContainerWithArray.new([s1, s2])\ncontainer.sepia_id = \"array_of_serializables\"\ncontainer.save\n```\n\n  On-disk representation:\n\n```text\n  _data/\n  ├── MyContainerWithArray/\n  │   └── array_of_serializables/\n  │       └── serializables/\n  │           ├── 0 -> ../../../../MySerializable/s1_id\n  │           └── 1 -> ../../../../MySerializable/s2_id\n  └── MySerializable/\n      ├── s1_id\n      └── s2_id\n```\n\n- **Arrays/Sets of `Container` objects:** Stored in a subdirectory\n  named after the collection's instance variable. Each container object\n  is stored as a subdirectory within that directory, using its index as\n  the directory name.\n\n  Example:\n```\nclass MyContainerWithArrayOfContainers\n  include Sepia::Container\n  property containers : Array(MyContainer)\n\n  def initialize(@containers = [] of MyContainer); end\nend\n\nc1 = MyContainer.new; c1.sepia_id = \"c1_id\"\nc2 = MyContainer.new; c2.sepia_id = \"c2_id\"\ncontainer = MyContainerWithArrayOfContainers.new([c1, c2])\ncontainer.sepia_id = \"array_of_containers\"\ncontainer.save\n```\n\n  On-disk representation:\n\n```text\n_data/\n  ├── MyContainerWithArrayOfContainers/\n  │   └── array_of_containers/\n  │       └── containers/\n  │           ├── 0/\n  │           └── 1/\n  └── MyContainer/\n      ├── c1_id/\n      └── c2_id/\n```\n\n- **Hashes (String keys) of `Serializable` values:** Stored in a subdirectory\n  named after the hash's instance variable. Each serializable object\n  is symlinked into that directory using its key as the filename.\n\n  Example:\n\n  ```\nclass MyContainerWithHash\n  include Sepia::Container\n  property serializables_hash : Hash(String, MySerializable)\n\n  def initialize(@serializables_hash = {} of String => MySerializable); end\nend\n\ns1 = MySerializable.new(\"alpha\"); s1.sepia_id = \"alpha_id\"\ns2 = MySerializable.new(\"beta\"); s2.sepia_id = \"beta_id\"\ncontainer = MyContainerWithHash.new({\"a\" => s1, \"b\" => s2})\ncontainer.sepia_id = \"hash_of_serializables\"\ncontainer.save\n  ```\n\n  On-disk representation:\n\n```text\n_data/\n├── MyContainerWithHash/\n│   └── hash_of_serializables/\n│       └── serializables_hash/\n│           ├── a -> ../../../../MySerializable/alpha_id\n│           └── b -> ../../../../MySerializable/beta_id\n└── MySerializable/\n    ├── alpha_id\n    └── beta_id\n```\n\n- **Hashes (String keys) of `Container` values:** Stored in a subdirectory\n  named after the hash's instance variable. Each container object\n  is stored as a subdirectory within that directory, using its key as\n  the directory name.\n\n  Example:\n\n```\nclass MyContainerWithHashOfContainers\n  include Sepia::Container\n  property containers_hash : Hash(String, MyContainer)\n\n  def initialize(@containers_hash = {} of String => MyContainer); end\nend\n\nc1 = MyContainer.new; c1.sepia_id = \"hash_c1_id\"\nc2 = MyContainer.new; c2.sepia_id = \"hash_c2_id\"\ncontainer = MyContainerWithHashOfContainers.new({\"x\" => c1, \"y\" => c2})\ncontainer.sepia_id = \"hash_of_containers\"\ncontainer.save\n```\n\nOn-disk representation:\n\n```text\n_data/\n├── MyContainerWithHashOfContainers/\n│   └── hash_of_containers/\n│       └── containers_hash/\n│           ├── x/\n│           └── y/\n└── MyContainer/\n    ├── hash_c1_id/\n    └── hash_c2_id/\n```","summary":"<p>Sepia is a simple, file-system-based serialization library for Crystal.</p>","class_methods":[{"html_id":"container?(name:String):Bool-class-method","name":"container?","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Bool","args_html":"(name : String) : Bool","location":{"filename":"src/sepia.cr","line_number":284,"url":null},"def":{"name":"container?","args":[{"name":"name","external_name":"name","restriction":"String"}],"return_type":"Bool","visibility":"Public","body":"@@is_container_registry[name]? || false"},"external_var":false},{"html_id":"register_class_type(name:String,is_container:Bool)-class-method","name":"register_class_type","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"is_container","external_name":"is_container","restriction":"Bool"}],"args_string":"(name : String, is_container : Bool)","args_html":"(name : String, is_container : Bool)","location":{"filename":"src/sepia.cr","line_number":280,"url":null},"def":{"name":"register_class_type","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"is_container","external_name":"is_container","restriction":"Bool"}],"visibility":"Public","body":"@@is_container_registry[name] = is_container"},"external_var":false}],"types":[{"html_id":"Sepia/Sepia/Container","path":"Sepia/Container.html","kind":"module","full_name":"Sepia::Container","name":"Container","abstract":false,"locations":[{"filename":"src/sepia/container.cr","line_number":64,"url":null}],"repository_name":"Sepia","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"Sepia/Sepia","kind":"module","full_name":"Sepia","name":"Sepia"},"doc":"Module for objects that contain other Sepia objects.\n\nThe `Container` module enables objects to contain nested Serializable or\nContainer objects. Containers serialize as directories on disk, with\ncontained objects stored as files, subdirectories, or symlinks.\n\n### Key Features\n\n- **Automatic JSON Serialization**: Primitive properties are automatically\n  serialized to a `data.json` file\n- **Nested Object Storage**: Contained Sepia objects are stored as references\n- **Complex Structure Support**: Handles Arrays, Hashes, Sets, and nilable references\n- **Symlink References**: Serializable objects are stored as symlinks to avoid duplication\n\n### Directory Structure\n\n```\ncontainer_id/\n  ├── data.json           # Primitive properties (automatic)\n  ├── simple_array/       # Array of primitives\n  │   ├── 0000_value1\n  │   └── 0001_value2\n  ├── object_array/       # Array of Sepia objects\n  │   ├── 0000 -> ../../ClassName/id1\n  │   └── 0001 -> ../../ClassName/id2\n  ├── nested_object/      # Single Sepia object\n  │   └── 0000 -> ../../OtherClass/id\n  └── complex_hash/       # Hash with mixed types\n      ├── key1/value1     # Primitive value\n      └── key2 -> ../../RefClass/id  # Sepia object reference\n```\n\n### Example\n\n```\nclass Project < Sepia::Object\n  include Sepia::Container\n\n  # Primitive properties - automatically serialized\n  property name : String\n  property created_at : Time\n  property tags : Array(String)\n\n  # Sepia object references - stored as symlinks\n  owner : User?\n  tasks : Array(Task)\n  metadata : Hash(String, Document)?\n\n  def initialize(@name = \"\")\n    @created_at = Time.utc\n    @tags = [] of String\n    @tasks = [] of Task\n  end\nend\n\nproject = Project.new(\"My Project\")\nproject.owner = user            # User object\nproject.tasks << task1 << task2 # Task objects\nproject.save                    # Creates directory structure\n```","summary":"<p>Module for objects that contain other Sepia objects.</p>","instance_methods":[{"html_id":"load_enumerable_of_containers(path:String,name:String,collection_type:T.class,item_type:U.class)forallT,U-instance-method","name":"load_enumerable_of_containers","doc":"Loads an enumerable of containers from a directory of subdirectories.","summary":"<p>Loads an enumerable of containers from a directory of subdirectories.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"String"},{"name":"name","external_name":"name","restriction":"String"},{"name":"collection_type","external_name":"collection_type","restriction":"T.class"},{"name":"item_type","external_name":"item_type","restriction":"U.class"}],"args_string":"(path : String, name : String, collection_type : T.class, item_type : U.class) forall T, U","args_html":"(path : String, name : String, collection_type : <span class=\"t\">T</span>.<span class=\"k\">class</span>, item_type : <span class=\"t\">U</span>.<span class=\"k\">class</span>) forall T, U","location":{"filename":"src/sepia/container.cr","line_number":478,"url":null},"def":{"name":"load_enumerable_of_containers","args":[{"name":"path","external_name":"path","restriction":"String"},{"name":"name","external_name":"name","restriction":"String"},{"name":"collection_type","external_name":"collection_type","restriction":"T.class"},{"name":"item_type","external_name":"item_type","restriction":"U.class"}],"visibility":"Public","body":"array_dir = File.join(path, name)\nloaded_collection = T.new\nif Dir.exists?(array_dir)\n  dirs = (Dir.entries(array_dir)).reject do |e| (e == \".\") || (e == \"..\") end.sort!\n  dirs.each do |entry|\n    container_path = File.join(array_dir, entry)\n    if Dir.exists?(container_path)\n      container = U.new\n\n      container.sepia_id = (entry.split(\"_\", 2))[1]\n      container.load_references(container_path)\n      loaded_collection << container\n    end\n  end\nend\nloaded_collection\n"},"external_var":false},{"html_id":"load_enumerable_of_references(path:String,name:String,collection_type:T.class,item_type:U.class)forallT,U-instance-method","name":"load_enumerable_of_references","doc":"Loads an enumerable of serializable objects from a directory of symlinks.","summary":"<p>Loads an enumerable of serializable objects from a directory of symlinks.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"String"},{"name":"name","external_name":"name","restriction":"String"},{"name":"collection_type","external_name":"collection_type","restriction":"T.class"},{"name":"item_type","external_name":"item_type","restriction":"U.class"}],"args_string":"(path : String, name : String, collection_type : T.class, item_type : U.class) forall T, U","args_html":"(path : String, name : String, collection_type : <span class=\"t\">T</span>.<span class=\"k\">class</span>, item_type : <span class=\"t\">U</span>.<span class=\"k\">class</span>) forall T, U","location":{"filename":"src/sepia/container.cr","line_number":446,"url":null},"def":{"name":"load_enumerable_of_references","args":[{"name":"path","external_name":"path","restriction":"String"},{"name":"name","external_name":"name","restriction":"String"},{"name":"collection_type","external_name":"collection_type","restriction":"T.class"},{"name":"item_type","external_name":"item_type","restriction":"U.class"}],"visibility":"Public","body":"array_dir = File.join(path, name)\nloaded_collection = T.new\nif Dir.exists?(array_dir)\n  symlinks = (Dir.entries(array_dir)).reject do |e| (e == \".\") || (e == \"..\") end.sort!\n  symlinks.each do |entry|\n    symlink_path = File.join(array_dir, entry)\n    if File.symlink?(symlink_path)\n      obj_path = File.readlink(symlink_path)\n\n      abs_obj_path = if obj_path.starts_with?(\"/\")\n        obj_path\n      else\n        File.expand_path(obj_path, File.dirname(symlink_path))\n      end\n      obj_id = File.basename(abs_obj_path)\n\n      loaded_obj = item_type.from_sepia(File.read(abs_obj_path))\n      loaded_obj.sepia_id = obj_id\n      if loaded_obj.is_a?(Container)\n        container_path = abs_obj_path\n        loaded_obj.load_references(File.dirname(container_path))\n      end\n      loaded_collection << (loaded_obj.as(U))\n    end\n  end\nend\nloaded_collection\n"},"external_var":false},{"html_id":"load_hash_of_containers(path:String,name:String,collection_type:T.class,item_type:U.class)forallT,U-instance-method","name":"load_hash_of_containers","doc":"Loads a hash of containers from a directory of subdirectories.","summary":"<p>Loads a hash of containers from a directory of subdirectories.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"String"},{"name":"name","external_name":"name","restriction":"String"},{"name":"collection_type","external_name":"collection_type","restriction":"T.class"},{"name":"item_type","external_name":"item_type","restriction":"U.class"}],"args_string":"(path : String, name : String, collection_type : T.class, item_type : U.class) forall T, U","args_html":"(path : String, name : String, collection_type : <span class=\"t\">T</span>.<span class=\"k\">class</span>, item_type : <span class=\"t\">U</span>.<span class=\"k\">class</span>) forall T, U","location":{"filename":"src/sepia/container.cr","line_number":517,"url":null},"def":{"name":"load_hash_of_containers","args":[{"name":"path","external_name":"path","restriction":"String"},{"name":"name","external_name":"name","restriction":"String"},{"name":"collection_type","external_name":"collection_type","restriction":"T.class"},{"name":"item_type","external_name":"item_type","restriction":"U.class"}],"visibility":"Public","body":"hash_dir = File.join(path, name)\nloaded_hash = T.new\nif Dir.exists?(hash_dir)\n  dirs = (Dir.entries(hash_dir)).reject do |e| (e == \".\") || (e == \"..\") end\n  dirs.each do |entry|\n    container_path = File.join(hash_dir, entry)\n    if Dir.exists?(container_path)\n      container = U.new\n      container.sepia_id = entry\n      container.load_references(container_path)\n      loaded_hash[entry] = container\n    end\n  end\nend\nloaded_hash\n"},"external_var":false},{"html_id":"load_hash_of_references(path:String,name:String,collection_type:T.class,item_type:U.class)forallT,U-instance-method","name":"load_hash_of_references","doc":"Loads a hash of serializable objects from a directory of symlinks.","summary":"<p>Loads a hash of serializable objects from a directory of symlinks.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"String"},{"name":"name","external_name":"name","restriction":"String"},{"name":"collection_type","external_name":"collection_type","restriction":"T.class"},{"name":"item_type","external_name":"item_type","restriction":"U.class"}],"args_string":"(path : String, name : String, collection_type : T.class, item_type : U.class) forall T, U","args_html":"(path : String, name : String, collection_type : <span class=\"t\">T</span>.<span class=\"k\">class</span>, item_type : <span class=\"t\">U</span>.<span class=\"k\">class</span>) forall T, U","location":{"filename":"src/sepia/container.cr","line_number":498,"url":null},"def":{"name":"load_hash_of_references","args":[{"name":"path","external_name":"path","restriction":"String"},{"name":"name","external_name":"name","restriction":"String"},{"name":"collection_type","external_name":"collection_type","restriction":"T.class"},{"name":"item_type","external_name":"item_type","restriction":"U.class"}],"visibility":"Public","body":"hash_dir = File.join(path, name)\nloaded_hash = T.new\nif Dir.exists?(hash_dir)\n  symlinks = (Dir.entries(hash_dir)).reject do |e| (e == \".\") || (e == \"..\") end\n  symlinks.each do |entry|\n    symlink_path = File.join(hash_dir, entry)\n    if File.symlink?(symlink_path)\n      obj_path = File.readlink(symlink_path)\n      obj_id = File.basename(obj_path)\n      loaded_obj = Sepia::Storage::INSTANCE.load(item_type, obj_id)\n      loaded_hash[entry] = loaded_obj.as(U)\n    end\n  end\nend\nloaded_hash\n"},"external_var":false},{"html_id":"load_references(path:String)-instance-method","name":"load_references","doc":"Loads all references (Serializable, Container, Enumerable of either)\nfrom the container's path.","summary":"<p>Loads all references (Serializable, Container, Enumerable of either) from the container's path.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"String"}],"args_string":"(path : String)","args_html":"(path : String)","location":{"filename":"src/sepia/container.cr","line_number":260,"url":null},"def":{"name":"load_references","args":[{"name":"path","external_name":"path","restriction":"String"}],"visibility":"Public","body":"{% for ivar in @type.instance_vars %}\n        # For each instance variable, check if it's a Serializable or a Container.\n        # Handle both direct Serializable types and nilable Serializables (unions)\n        {% if ivar.type < Sepia::Serializable || (ivar.type.union? && ivar.type.union_types.any? do |type| type < Sepia::Serializable end) %}\n          # Determine the actual Serializable type (for union types, find the non-nil type)\n          {% if ivar.type < Sepia::Serializable %}\n            {% serializable_type = ivar.type %}\n          {% else %}\n            {% serializable_type = nil %}\n            {% for type in ivar.type.union_types %}\n              {% if type < Sepia::Serializable %}\n                {% serializable_type = type %}\n              {% end %}\n            {% end %}\n          {% end %}\n          # Check if we're using InMemoryStorage\n          if Sepia::Storage.backend.is_a?(InMemoryStorage)\n            # Load from in-memory reference storage\n            ref_key = Sepia::Storage.backend.as(InMemoryStorage).get_reference(path, {{ ivar.name.stringify }})\n            if ref_key\n              obj_class_name, obj_id = ref_key.split('/', 2)\n              @{{ ivar.name }} = Sepia::Storage::INSTANCE.load({{ serializable_type }}, obj_id).as({{ ivar.type }})\n            else\n              {% if ivar.type.nilable? %}\n                @{{ ivar.name }} = nil\n              {% else %}\n                raise \"Missing required reference for '\" + {{ ivar.name.stringify }} + \"' in container at \" + path\n              {% end %}\n            end\n          else\n            # Load from filesystem symlinks\n            symlink_path = File.join(path, {{ ivar.name.stringify }})\n            if File.symlink?(symlink_path)\n              # See where the symlink points to - it might be relative or absolute\n              obj_path = File.readlink(symlink_path)\n              # Resolve to absolute path\n              abs_obj_path = if obj_path.starts_with?(\"/\")\n                               obj_path\n                             else\n                               File.expand_path(obj_path, File.dirname(symlink_path))\n                             end\n              obj_id = File.basename(abs_obj_path)\n              # Read the file directly\n              obj = {{ serializable_type }}.from_sepia(File.read(abs_obj_path))\n              obj.sepia_id = obj_id\n              @{{ ivar.name }} = obj.as({{ ivar.type }})\n            else\n              {% if ivar.type.nilable? %}\n                @{{ ivar.name }} = nil\n              {% else %}\n                raise \"Missing required reference for '#{symlink_path}' for non-nilable property '{{ ivar.name }}'\"\n              {% end %}\n            end\n          end\n        {% elsif ivar.type < Sepia::Container %}\n          container_path = File.join(path, {{ ivar.name.stringify }})\n          if Dir.exists?(container_path)\n            @{{ ivar.name }} = {{ ivar.type }}.new\n            @{{ ivar.name }}.as({{ ivar.type }}).sepia_id = {{ ivar.name.stringify }}\n            @{{ ivar.name }}.as(Container).load_references(container_path)\n          else\n            {% if ivar.type.nilable? %}\n              @{{ ivar.name }} = nil\n            {% end %}\n          end\n        {% elsif ivar.type < Enumerable && ivar.type.type_vars.first < Sepia::Serializable %}\n          array_dir = File.join(path, {{ ivar.name.stringify }})\n          if Dir.exists?(array_dir)\n            @{{ ivar.name }} = load_enumerable_of_references(path, {{ ivar.name.stringify }}, {{ ivar.type }}, {{ ivar.type.type_vars.first }})\n          else\n            {% if ivar.type.union? %} # It's nilable\n              @{{ ivar.name }} = nil\n            {% else %} # It's not nilable, so create empty array\n              @{{ ivar.name }} = {{ ivar.type }}.new\n            {% end %}\n          end\n        {% elsif ivar.type < Enumerable && ivar.type.type_vars.first < Sepia::Container %}\n          array_dir = File.join(path, {{ ivar.name.stringify }})\n          if Dir.exists?(array_dir)\n            @{{ ivar.name }} = load_enumerable_of_containers(path, {{ ivar.name.stringify }}, {{ ivar.type }}, {{ ivar.type.type_vars.first }})\n          else\n            {% if ivar.type.union? %} # It's nilable\n              @{{ ivar.name }} = nil\n            {% else %} # It's not nilable, so create empty array\n              @{{ ivar.name }} = {{ ivar.type }}.new\n            {% end %}\n          end\n        {% elsif (ivar.type < Hash && (ivar.type.type_vars.first == String)) && ivar.type.type_vars.last < Sepia::Serializable %}\n          hash_dir = File.join(path, {{ ivar.name.stringify }})\n          if Dir.exists?(hash_dir)\n            @{{ ivar.name }} = load_hash_of_references(path, {{ ivar.name.stringify }}, {{ ivar.type }}, {{ ivar.type.type_vars.last }})\n          else\n            {% if ivar.type.union? %} # It's nilable\n              @{{ ivar.name }} = nil\n            {% else %} # It's not nilable, so create empty hash\n              @{{ ivar.name }} = {{ ivar.type }}.new\n            {% end %}\n          end\n        {% elsif (ivar.type < Hash && (ivar.type.type_vars.first == String)) && ivar.type.type_vars.last < Sepia::Container %}\n          hash_dir = File.join(path, {{ ivar.name.stringify }})\n          if Dir.exists?(hash_dir)\n            @{{ ivar.name }} = load_hash_of_containers(path, {{ ivar.name.stringify }}, {{ ivar.type }}, {{ ivar.type.type_vars.last }})\n          else\n            {% if ivar.type.union? %} # It's nilable\n              @{{ ivar.name }} = nil\n            {% else %} # It's not nilable, so create empty hash\n              @{{ ivar.name }} = {{ ivar.type }}.new\n            {% end %}\n          end\n        {% end %}\n      {% end %}\n\n\ndata_file = File.join(path, \"data.json\")\nif File.exists?(data_file)\n  json_data = File.read(data_file)\n  if json_data.empty?\n  else\n    parser = JSON::Parser.new(json_data)\n    data = parser.parse\n\n    if data_hash = data.as_h?\n      {% for ivar in @type.instance_vars %}\n                {% unless (\n        (\n          (\n            (\n              ivar.type < Sepia::Object ||\n              (ivar.type.union? && ivar.type.union_types.any? do |t| t < Sepia::Object end)\n            ) ||\n            (((ivar.type.stringify.includes?(\"Array\")) && ivar.type.type_vars.size > 0) && ivar.type.type_vars.first < Sepia::Object)\n          ) ||\n          (((ivar.type.stringify.includes?(\"Set\")) && ivar.type.type_vars.size > 0) && ivar.type.type_vars.first < Sepia::Object)\n        ) ||\n        (((ivar.type.stringify.includes?(\"Hash\")) && ivar.type.type_vars.size > 1) && ivar.type.type_vars.last < Sepia::Object)\n      ) ||\n      (ivar.name.stringify == \"sepia_id\") %}\n                  # Find the key (it might be a JSON::Any)\n                  key = data_hash.keys.find { |k| k.to_s == {{ ivar.name.stringify }} }\n                  if key\n                    value = data_hash[key]\n                    # Use JSON::Serializable's built-in parsing\n                    {% if ivar.type.stringify.includes?(\"Array\") %}\n                      parsed_value = Array({{ ivar.type.type_vars.first }}).from_json(value.to_json)\n                    {% elsif ivar.type.stringify.includes?(\"Hash\") %}\n                      parsed_value = Hash({{ ivar.type.type_vars.first }}, {{ ivar.type.type_vars.last }}).from_json(value.to_json)\n                    {% else %}\n                      parsed_value = {{ ivar.type }}.from_json(value.to_json)\n                    {% end %}\n                    @{{ ivar.name }} = parsed_value\n                  end\n                {% end %}\n              {% end %}\n    end\n  end\nend\n"},"external_var":false},{"html_id":"restore_properties_from_json(json_data:String)-instance-method","name":"restore_properties_from_json","doc":"Restore primitive properties from JSON without creating a new instance","summary":"<p>Restore primitive properties from JSON without creating a new instance</p>","abstract":false,"args":[{"name":"json_data","external_name":"json_data","restriction":"String"}],"args_string":"(json_data : String)","args_html":"(json_data : String)","location":{"filename":"src/sepia/container.cr","line_number":412,"url":null},"def":{"name":"restore_properties_from_json","args":[{"name":"json_data","external_name":"json_data","restriction":"String"}],"visibility":"Public","body":"if json_data.empty?\n  return\nend\n\n\nparser = JSON::Parser.new(json_data)\ndata = parser.parse\n\nif data_hash = data.as_h?\n  {% for ivar in @type.instance_vars %}\n          {% unless (\n    (\n      (\n        (\n          ivar.type < Sepia::Object ||\n          (ivar.type.union? && ivar.type.union_types.any? do |t| t < Sepia::Object end)\n        ) ||\n        (((ivar.type.stringify.includes?(\"Array\")) && ivar.type.type_vars.size > 0) && ivar.type.type_vars.first < Sepia::Object)\n      ) ||\n      (((ivar.type.stringify.includes?(\"Set\")) && ivar.type.type_vars.size > 0) && ivar.type.type_vars.first < Sepia::Object)\n    ) ||\n    (((ivar.type.stringify.includes?(\"Hash\")) && ivar.type.type_vars.size > 1) && ivar.type.type_vars.last < Sepia::Object)\n  ) ||\n  (ivar.name.stringify == \"sepia_id\") %}\n            key = data_hash.keys.find { |k| k.to_s == {{ ivar.name.stringify }} }\n            if key\n              value = data_hash[key]\n              # Parse the value based on type\n              {% if ivar.type.stringify.includes?(\"Array\") %}\n                parsed_value = Array({{ ivar.type.type_vars.first }}).from_json(value.to_json)\n              {% elsif ivar.type.stringify.includes?(\"Hash\") %}\n                parsed_value = Hash({{ ivar.type.type_vars.first }}, {{ ivar.type.type_vars.last }}).from_json(value.to_json)\n              {% else %}\n                parsed_value = {{ ivar.type }}.from_json(value.to_json)\n              {% end %}\n              @{{ ivar.name }} = parsed_value\n            end\n          {% end %}\n        {% end %}\nend\n"},"external_var":false},{"html_id":"save_references(path:String)-instance-method","name":"save_references","doc":"Saves all references (Serializable, Container, Enumerable of either)\nto the container's path.","summary":"<p>Saves all references (Serializable, Container, Enumerable of either) to the container's path.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"String"}],"args_string":"(path : String)","args_html":"(path : String)","location":{"filename":"src/sepia/container.cr","line_number":183,"url":null},"def":{"name":"save_references","args":[{"name":"path","external_name":"path","restriction":"String"}],"visibility":"Public","body":"{% for ivar in @type.instance_vars %}\n        save_value(path, @{{ ivar.name }}, {{ ivar.name.stringify }})\n      {% end %}\n\n\ndata_file = File.join(path, \"data.json\")\nFile.write(data_file, to_filtered_json)\n"},"external_var":false},{"html_id":"sepia_references:Enumerable(Sepia::Object)-instance-method","name":"sepia_references","doc":"Returns all Sepia objects referenced by this container.\n\nThis method automatically inspects all instance variables and collects\nany Sepia objects, including those nested in Arrays, Hashes, and Sets.\nUsed by the garbage collector to track object relationships.\n\n### Returns\n\nAn Enumerable containing all Sepia objects referenced by this container.\n\n### Example\n\n```\nclass Team < Sepia::Object\n  include Sepia::Container\n  property members : Array(User)\n  property lead : User?\n  property projects : Hash(String, Project)\n\n  def initialize\n    @members = [] of User\n    @projects = {} of String => Project\n  end\nend\n\nteam = Team.new\nteam.members << user1 << user2\nteam.lead = user3\nteam.projects[\"web\"] = project1\n\nrefs = team.sepia_references\n# refs contains [user1, user2, user3, project1]\n```","summary":"<p>Returns all Sepia objects referenced by this container.</p>","abstract":false,"location":{"filename":"src/sepia/container.cr","line_number":156,"url":null},"def":{"name":"sepia_references","return_type":"Enumerable(Sepia::Object)","visibility":"Public","body":"refs = [] of Sepia::Object\n{% for ivar in @type.instance_vars %}\n        value = @{{ ivar.name }}\n        if value.is_a?(Sepia::Object)\n          refs << value\n        elsif value.is_a?(Enumerable)\n          value.each do |item|\n            add_sepia_object_to_refs(item, refs)\n          end\n        elsif value.is_a?(Hash)\n          value.each_value do |item|\n            add_sepia_object_to_refs(item, refs)\n          end\n        end\n      {% end %}\nrefs\n"},"external_var":false},{"html_id":"to_filtered_json:String-instance-method","name":"to_filtered_json","doc":"Serializes only primitive properties to JSON.\n\nThis method automatically filters out any Sepia object references,\nserializing only primitive types (String, Int32, Bool, Time, etc.)\nand collections of primitives. The resulting JSON is stored in\nthe container's `data.json` file.\n\n### Returns\n\nA JSON string containing only the primitive properties of the container.\n\n### Example\n\n```\nclass UserProfile < Sepia::Object\n  include Sepia::Container\n  property name : String         # Included in JSON\n  property age : Int32           # Included in JSON\n  property friends : Array(User) # Excluded (Sepia objects)\n\n  def initialize(@name = \"\", @age = 0)\n    @friends = [] of User\n  end\nend\n\nprofile = UserProfile.new(\"Alice\", 30)\njson = profile.to_filtered_json\n# json = {\"name\":\"Alice\",\"age\":30,\"friends\":[]}\n```","summary":"<p>Serializes only primitive properties to JSON.</p>","abstract":false,"location":{"filename":"src/sepia/container.cr","line_number":104,"url":null},"def":{"name":"to_filtered_json","return_type":"String","visibility":"Public","body":"String.build do |io|\n  JSON.build(io) do |json|\n    json.object do\n      {% for ivar in @type.instance_vars %}\n              {% unless (\n        (\n          (\n            (\n              ivar.type < Sepia::Object ||\n              (ivar.type.union? && ivar.type.union_types.any? do |t| t < Sepia::Object end)\n            ) ||\n            (((ivar.type.stringify.includes?(\"Array\")) && ivar.type.type_vars.size > 0) && ivar.type.type_vars.first < Sepia::Object)\n          ) ||\n          (((ivar.type.stringify.includes?(\"Set\")) && ivar.type.type_vars.size > 0) && ivar.type.type_vars.first < Sepia::Object)\n        ) ||\n        (((ivar.type.stringify.includes?(\"Hash\")) && ivar.type.type_vars.size > 1) && ivar.type.type_vars.last < Sepia::Object)\n      ) ||\n      (ivar.name.stringify == \"sepia_id\") %}\n                json.field {{ ivar.name.stringify }}, @{{ ivar.name }}\n              {% end %}\n            {% end %}\n    end\n  end\nend"},"external_var":false}]},{"html_id":"Sepia/Sepia/FileStorage","path":"Sepia/FileStorage.html","kind":"class","full_name":"Sepia::FileStorage","name":"FileStorage","abstract":false,"superclass":{"html_id":"Sepia/Sepia/StorageBackend","kind":"class","full_name":"Sepia::StorageBackend","name":"StorageBackend"},"ancestors":[{"html_id":"Sepia/Sepia/StorageBackend","kind":"class","full_name":"Sepia::StorageBackend","name":"StorageBackend"},{"html_id":"Sepia/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Sepia/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/sepia/file_storage.cr","line_number":35,"url":null}],"repository_name":"Sepia","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"Sepia/Sepia","kind":"module","full_name":"Sepia","name":"Sepia"},"doc":"Filesystem-based storage backend for Sepia objects.\n\nThis is the default storage backend that stores objects on the local filesystem.\nSerializable objects are stored as files, while Container objects are stored as\ndirectories with nested structures.\n\n### Directory Structure\n\nThe storage creates a directory structure like:\n\n```\nstorage_path/\n  ├── ClassName1/\n  │   ├── object1_id     (Serializable object file)\n  │   └── object2_id     (Serializable object file)\n  └── ClassName2/\n      ├── container1/    (Container directory)\n      │   ├── data.json  (Primitive properties)\n      │   └── refs/      (Reference files/symlinks)\n      └── container2/    (Container directory)\n```\n\n### Example\n\n```\n# Configure Sepia to use filesystem storage\nSepia::Storage.configure(:filesystem, {\"path\" => \"./data\"})\n\n# Objects will be stored in ./data/ClassName/sepia_id\n```","summary":"<p>Filesystem-based storage backend for Sepia objects.</p>","constructors":[{"html_id":"new(path:String=Dir.tempdir)-class-method","name":"new","doc":"Creates a new FileStorage instance.\n\nThe `path` parameter specifies the root directory where objects will be stored.\nIf not provided, uses the system's temporary directory.\n\n```\n# Use system temp directory\nstorage = FileStorage.new\n\n# Use custom directory\nstorage = FileStorage.new(\"./data\")\n\n# Use absolute path\nstorage = FileStorage.new(\"/var/lib/myapp/data\")\n```","summary":"<p>Creates a new FileStorage instance.</p>","abstract":false,"args":[{"name":"path","default_value":"Dir.tempdir","external_name":"path","restriction":"String"}],"args_string":"(path : String = Dir.tempdir)","args_html":"(path : String = <span class=\"t\">Dir</span>.tempdir)","location":{"filename":"src/sepia/file_storage.cr","line_number":65,"url":null},"def":{"name":"new","args":[{"name":"path","default_value":"Dir.tempdir","external_name":"path","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(path)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"clear-instance-method","name":"clear","doc":"Clears all objects from storage.\n\nRemoves the entire storage directory and recreates it.\nThis permanently deletes all data - use with caution.\n\n```\nstorage.clear # Deletes everything in the storage path\n```","summary":"<p>Clears all objects from storage.</p>","abstract":false,"location":{"filename":"src/sepia/file_storage.cr","line_number":265,"url":null},"def":{"name":"clear","visibility":"Public","body":"if Dir.exists?(@path)\n  FileUtils.rm_rf(@path)\n  FileUtils.mkdir_p(@path)\nend"},"external_var":false},{"html_id":"count(object_class:Class):Int32-instance-method","name":"count","doc":"Returns the count of objects for a given class.\n\nThis is equivalent to `list_all(object_class).size` but may be\nmore efficient in some implementations.\n\n```\ncount = storage.count(MyDocument)\nputs \"Found #{count} documents\"\n```","summary":"<p>Returns the count of objects for a given class.</p>","abstract":false,"args":[{"name":"object_class","external_name":"object_class","restriction":"Class"}],"args_string":"(object_class : Class) : Int32","args_html":"(object_class : Class) : Int32","location":{"filename":"src/sepia/file_storage.cr","line_number":253,"url":null},"def":{"name":"count","args":[{"name":"object_class","external_name":"object_class","restriction":"Class"}],"return_type":"Int32","visibility":"Public","body":"(list_all(object_class)).size"},"external_var":false},{"html_id":"delete(class_name:String,id:String)-instance-method","name":"delete","doc":"Deletes an object by class name and ID.\n\nAlternative method to delete objects without loading them first.\nRequires knowing whether the class is a Container or Serializable type.\n\n```\n# Delete without loading the object\nstorage.delete(\"MyDocument\", \"doc-uuid\")\nstorage.delete(\"MyBoard\", \"board-uuid\")\n```","summary":"<p>Deletes an object by class name and ID.</p>","abstract":false,"args":[{"name":"class_name","external_name":"class_name","restriction":"String"},{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(class_name : String, id : String)","args_html":"(class_name : String, id : String)","location":{"filename":"src/sepia/file_storage.cr","line_number":190,"url":null},"def":{"name":"delete","args":[{"name":"class_name","external_name":"class_name","restriction":"String"},{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"object_path = File.join(@path, class_name, id)\nif Sepia.container?(class_name)\n  if Dir.exists?(object_path)\n    FileUtils.rm_rf(object_path)\n  end\nelsif File.exists?(object_path)\n  File.delete(object_path)\nend\n"},"external_var":false},{"html_id":"delete(object:Serializable|Container)-instance-method","name":"delete","doc":"Deletes an object from the filesystem.\n\nRemoves the object's file or directory. For Container objects, recursively\nremoves the entire directory structure including all nested objects.\n\n```\ndoc = MyDocument.load(\"doc-uuid\")\nstorage.delete(doc) # Removes the file\n\nboard = Board.load(\"board-uuid\")\nstorage.delete(board) # Removes the directory and all contents\n```","summary":"<p>Deletes an object from the filesystem.</p>","abstract":false,"args":[{"name":"object","external_name":"object","restriction":"Serializable | Container"}],"args_string":"(object : Serializable | Container)","args_html":"(object : <a href=\"../Sepia/Serializable.html\">Serializable</a> | <a href=\"../Sepia/Container.html\">Container</a>)","location":{"filename":"src/sepia/file_storage.cr","line_number":166,"url":null},"def":{"name":"delete","args":[{"name":"object","external_name":"object","restriction":"Serializable | Container"}],"visibility":"Public","body":"object_path = File.join(@path, object.class.name, object.sepia_id)\n\nif object.is_a?(Serializable)\n  if File.exists?(object_path)\n    File.delete(object_path)\n  end\nelsif object.is_a?(Container)\n  if Dir.exists?(object_path)\n    FileUtils.rm_rf(object_path)\n  end\nend\n"},"external_var":false},{"html_id":"exists?(object_class:Class,id:String):Bool-instance-method","name":"exists?","doc":"Checks if an object with the given ID exists.\n\nFor Serializable objects, checks if the file exists.\nFor Container objects, checks if the directory exists.\n\n```\nif storage.exists?(MyDocument, \"doc-uuid\")\n  puts \"Document exists\"\nend\n```","summary":"<p>Checks if an object with the given ID exists.</p>","abstract":false,"args":[{"name":"object_class","external_name":"object_class","restriction":"Class"},{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(object_class : Class, id : String) : Bool","args_html":"(object_class : Class, id : String) : Bool","location":{"filename":"src/sepia/file_storage.cr","line_number":232,"url":null},"def":{"name":"exists?","args":[{"name":"object_class","external_name":"object_class","restriction":"Class"},{"name":"id","external_name":"id","restriction":"String"}],"return_type":"Bool","visibility":"Public","body":"object_path = File.join(@path, object_class.to_s, id)\n\nif object_class < Serializable\n  File.exists?(object_path)\nelsif object_class < Container\n  File.directory?(object_path)\nelse\n  false\nend\n"},"external_var":false},{"html_id":"export_data:Hash(String,Array(Hash(String,String)))-instance-method","name":"export_data","doc":"Exports all data as a portable hash structure.\n\nReturns a hash where keys are class names and values are arrays of\nobject data. Each object includes its ID and either its content\n(for Serializable objects) or a container type marker.\n\nUseful for backing up or migrating data between storage backends.\n\n```\ndata = storage.export_data\n# data = {\n#   \"MyDocument\" => [\n#     {\"id\" => \"doc1\", \"content\" => \"Hello\"},\n#     {\"id\" => \"doc2\", \"content\" => \"World\"}\n#   ],\n#   \"MyBoard\" => [\n#     {\"id\" => \"board1\", \"type\" => \"container\"}\n#   ]\n# }\n```","summary":"<p>Exports all data as a portable hash structure.</p>","abstract":false,"location":{"filename":"src/sepia/file_storage.cr","line_number":292,"url":null},"def":{"name":"export_data","return_type":"Hash(String, Array(Hash(String, String)))","visibility":"Public","body":"data = {} of String => Array(Hash(String, String))\n\nif Dir.exists?(@path)\nelse\n  return data\nend\n\nDir.each_child(@path) do |class_name|\n  class_dir = File.join(@path, class_name)\n  if File.directory?(class_dir)\n  else\n    next\n  end\n\n  data[class_name] = [] of Hash(String, String)\n\n  Dir.each_child(class_dir) do |id|\n    object_path = File.join(class_dir, id)\n\n    if File.file?(object_path)\n      data[class_name] << {\"id\" => id, \"content\" => File.read(object_path)}\n    elsif File.directory?(object_path)\n      data[class_name] << {\"id\" => id, \"type\" => \"container\"}\n    end\n  end\nend\n\ndata\n"},"external_var":false},{"html_id":"import_data(data:Hash(String,Array(Hash(String,String))))-instance-method","name":"import_data","doc":"Imports data from an exported hash structure.\n\nRestores objects from the data structure created by `export_data`.\nClears any existing data before importing.\n\nUseful for restoring backups or migrating from another storage backend.\n\n```\ndata = {\n  \"MyDocument\" => [\n    {\"id\" => \"doc1\", \"content\" => \"Hello\"},\n  ],\n}\nstorage.import_data(data)\n```","summary":"<p>Imports data from an exported hash structure.</p>","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"Hash(String, Array(Hash(String, String)))"}],"args_string":"(data : Hash(String, Array(Hash(String, String))))","args_html":"(data : Hash(String, Array(Hash(String, String))))","location":{"filename":"src/sepia/file_storage.cr","line_number":340,"url":null},"def":{"name":"import_data","args":[{"name":"data","external_name":"data","restriction":"Hash(String, Array(Hash(String, String)))"}],"visibility":"Public","body":"clear\n\ndata.each do |class_name, objects|\n  class_dir = File.join(@path, class_name)\n  FileUtils.mkdir_p(class_dir)\n\n  objects.each do |obj_data|\n    object_path = File.join(class_dir, obj_data[\"id\"])\n\n    if obj_data.has_key?(\"content\")\n      File.write(object_path, obj_data[\"content\"])\n    elsif obj_data[\"type\"]? == \"container\"\n      FileUtils.mkdir_p(object_path)\n    end\n  end\nend\n"},"external_var":false},{"html_id":"list_all(object_class:Class):Array(String)-instance-method","name":"list_all","doc":"Lists all object IDs for a given class.\n\nReturns an array of all object IDs found in the class directory.\nThe IDs are sorted alphabetically.\n\n```\nids = storage.list_all(MyDocument)\nids # => [\"doc-uuid1\", \"doc-uuid2\", \"doc-uuid3\"]\n```","summary":"<p>Lists all object IDs for a given class.</p>","abstract":false,"args":[{"name":"object_class","external_name":"object_class","restriction":"Class"}],"args_string":"(object_class : Class) : Array(String)","args_html":"(object_class : Class) : Array(String)","location":{"filename":"src/sepia/file_storage.cr","line_number":212,"url":null},"def":{"name":"list_all","args":[{"name":"object_class","external_name":"object_class","restriction":"Class"}],"return_type":"Array(String)","visibility":"Public","body":"class_dir = File.join(@path, object_class.to_s)\nif Dir.exists?(class_dir)\nelse\n  return [] of String\nend\n\n(Dir.entries(class_dir))\n  .reject do |e| (e == \".\") || (e == \"..\") end\n  .select do |e| (File.file?(File.join(class_dir, e))) || (File.directory?(File.join(class_dir, e))) end\n  .sort!\n"},"external_var":false},{"html_id":"list_all_objects:Hash(String,Array(String))-instance-method","name":"list_all_objects","doc":"Lists all objects grouped by class name.\n\nReturns a hash where keys are class names and values are arrays of\nobject IDs for that class. This provides a complete inventory of\nall objects in storage.\n\nUseful for administrative purposes, data migration, or debugging.\n\n```\nall_objects = storage.list_all_objects\n# all_objects = {\n#   \"MyDocument\" => [\"doc1\", \"doc2\"],\n#   \"MyBoard\" => [\"board1\"],\n#   \"User\" => [\"user1\", \"user2\", \"user3\"]\n# }\n```","summary":"<p>Lists all objects grouped by class name.</p>","abstract":false,"location":{"filename":"src/sepia/file_storage.cr","line_number":377,"url":null},"def":{"name":"list_all_objects","return_type":"Hash(String, Array(String))","visibility":"Public","body":"objects = Hash(String, Array(String)).new do |hash, key| hash[key] = [] of String end\nif Dir.exists?(@path)\nelse\n  return objects\nend\n\nDir.each_child(@path) do |class_name|\n  class_dir = File.join(@path, class_name)\n  if File.directory?(class_dir)\n  else\n    next\n  end\n\n  Dir.each_child(class_dir) do |id|\n    objects[class_name] << id\n  end\nend\nobjects\n"},"external_var":false},{"html_id":"load(object_class:Class,id:String,path:String|Nil=nil):Object-instance-method","name":"load","doc":"Loads an object from the filesystem.\n\nDeserializes an object of the specified class with the given ID.\nFor Serializable objects, reads the file content and uses the class's\n`from_sepia` method. For Container objects, reconstructs the object\nfrom its directory structure.\n\nRaises an exception if the object is not found.\n\n```\n# Load a Serializable object\ndoc = storage.load(MyDocument, \"doc-uuid\")\n\n# Load a Container object\nboard = storage.load(MyBoard, \"board-uuid\")\n```","summary":"<p>Loads an object from the filesystem.</p>","abstract":false,"args":[{"name":"object_class","external_name":"object_class","restriction":"Class"},{"name":"id","external_name":"id","restriction":"String"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"args_string":"(object_class : Class, id : String, path : String | Nil = nil) : Object","args_html":"(object_class : Class, id : String, path : String | Nil = <span class=\"n\">nil</span>) : <a href=\"../Sepia/Object.html\">Object</a>","location":{"filename":"src/sepia/file_storage.cr","line_number":130,"url":null},"def":{"name":"load","args":[{"name":"object_class","external_name":"object_class","restriction":"Class"},{"name":"id","external_name":"id","restriction":"String"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"return_type":"Object","visibility":"Public","body":"object_path = path || (File.join(@path, object_class.to_s, id))\n\ncase\nwhen object_class.responds_to?(:from_sepia)\n  if File.exists?(object_path)\n  else\n    raise(\"Object with ID #{id} not found in storage for type #{object_class}.\")\n  end\n  obj = object_class.from_sepia(File.read(object_path))\n  obj.sepia_id = id\n  obj\nwhen object_class < Container\n  if File.directory?(object_path)\n  else\n    raise(\"Object with ID #{id} not found in storage for type #{object_class} (directory missing).\")\n  end\n  obj = object_class.new\n  obj.sepia_id = id\n  (obj.as(Container)).load_references(object_path)\n  obj\nelse\n  raise(\"Unsupported class for Sepia storage: #{object_class.name}. Must include Sepia::Serializable or Sepia::Container.\")\nend\n"},"external_var":false},{"html_id":"path:String-instance-method","name":"path","doc":"Root directory path where objects are stored.\n\nDefault is the system's temporary directory. Can be set to any absolute path.\n\n```\nstorage = FileStorage.new\nstorage.path # => \"/tmp\"\n\n# Custom path\nstorage = FileStorage.new(\"./my_data\")\nstorage.path # => \"./my_data\"\n```","summary":"<p>Root directory path where objects are stored.</p>","abstract":false,"location":{"filename":"src/sepia/file_storage.cr","line_number":48,"url":null},"def":{"name":"path","return_type":"String","visibility":"Public","body":"@path"},"external_var":false},{"html_id":"path=(path:String)-instance-method","name":"path=","doc":"Root directory path where objects are stored.\n\nDefault is the system's temporary directory. Can be set to any absolute path.\n\n```\nstorage = FileStorage.new\nstorage.path # => \"/tmp\"\n\n# Custom path\nstorage = FileStorage.new(\"./my_data\")\nstorage.path # => \"./my_data\"\n```","summary":"<p>Root directory path where objects are stored.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"String"}],"args_string":"(path : String)","args_html":"(path : String)","location":{"filename":"src/sepia/file_storage.cr","line_number":48,"url":null},"def":{"name":"path=","args":[{"name":"path","external_name":"path","restriction":"String"}],"visibility":"Public","body":"@path = path"},"external_var":false},{"html_id":"save(object:Container,path:String|Nil=nil)-instance-method","name":"save","doc":"Saves a Container object to the filesystem.\n\nCreates a directory for the container and saves all nested objects and\nreferences. The container's primitive properties are saved to a data.json file,\nwhile nested Sepia objects are saved as files or symlinks.\n\n```\nboard = Board.new(\"My Board\")\nstorage = FileStorage.new(\"./data\")\nstorage.save(board) # Creates ./data/Board/uuid/\n```","summary":"<p>Saves a Container object to the filesystem.</p>","abstract":false,"args":[{"name":"object","external_name":"object","restriction":"Container"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"args_string":"(object : Container, path : String | Nil = nil)","args_html":"(object : <a href=\"../Sepia/Container.html\">Container</a>, path : String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/sepia/file_storage.cr","line_number":108,"url":null},"def":{"name":"save","args":[{"name":"object","external_name":"object","restriction":"Container"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"visibility":"Public","body":"object_path = path || (File.join(@path, object.class.name, object.sepia_id))\nFileUtils.mkdir_p(object_path)\nobject.save_references(object_path)\n"},"external_var":false},{"html_id":"save(object:Serializable,path:String|Nil=nil)-instance-method","name":"save","doc":"Saves a Serializable object to the filesystem.\n\nWrites the object's serialized content to a file. Creates any necessary\nparent directories. Uses atomic write operations to prevent corruption.\n\nThe object is saved to `path/class_name/sepia_id` if no specific path is provided.\n\n### Atomic Writes\n\nThe file is first written to a temporary file (with .tmp extension),\nthen atomically renamed to the final path. This prevents partial writes\nand ensures data integrity.\n\n```\ndoc = MyDocument.new(\"Hello\")\nstorage = FileStorage.new(\"./data\")\nstorage.save(doc) # Creates ./data/MyDocument/uuid\n```","summary":"<p>Saves a Serializable object to the filesystem.</p>","abstract":false,"args":[{"name":"object","external_name":"object","restriction":"Serializable"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"args_string":"(object : Serializable, path : String | Nil = nil)","args_html":"(object : <a href=\"../Sepia/Serializable.html\">Serializable</a>, path : String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/sepia/file_storage.cr","line_number":86,"url":null},"def":{"name":"save","args":[{"name":"object","external_name":"object","restriction":"Serializable"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"visibility":"Public","body":"object_path = path || (File.join(@path, object.class.name, object.sepia_id))\nobject_dir = File.dirname(object_path)\nif File.exists?(object_dir)\nelse\n  FileUtils.mkdir_p(object_dir)\nend\n\n\ntemp_path = \"#{object_path}.tmp\"\nFile.write(temp_path, object.to_sepia)\nFile.rename(temp_path, object_path)\n"},"external_var":false}]},{"html_id":"Sepia/Sepia/GenerationInfo","path":"Sepia/GenerationInfo.html","kind":"module","full_name":"Sepia::GenerationInfo","name":"GenerationInfo","abstract":false,"locations":[{"filename":"src/sepia/generation_info.cr","line_number":39,"url":null}],"repository_name":"Sepia","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"Sepia/Sepia","kind":"module","full_name":"Sepia","name":"Sepia"},"doc":"Module that adds generation tracking information to JSON serialization.\n\nInclude this module in your Serializable classes to automatically\ninclude generation metadata (`_generation` and `_base_id`) in the\nserialized JSON output. This is useful for:\n\n- Auditing: Track which version of an object was exported\n- Migration: Identify objects that need version updates\n- Debugging: See generation information in serialized data\n\n### Example\n\n```\nclass VersionedDocument < Sepia::Object\n  include Sepia::Serializable\n  include Sepia::GenerationInfo\n\n  property content : String\n\n  def initialize(@content = \"\")\n  end\n\n  def to_sepia : String\n    {content: @content}.to_json\n  end\n\n  def self.from_sepia(json : String) : self\n    data = JSON.parse(json)\n    new(data[\"content\"].as_s)\n  end\nend\n\ndoc = VersionedDocument.new(\"Hello\")\ndoc.sepia_id = \"doc-123.2\"\njson = doc.to_sepia\n# json includes: {\"content\":\"Hello\",\"_generation\":2,\"_base_id\":\"doc-123\"}\n```","summary":"<p>Module that adds generation tracking information to JSON serialization.</p>","class_methods":[{"html_id":"from_sepia_with_generation(sepia_string:String,&)-class-method","name":"from_sepia_with_generation","doc":"Helper method for deserializing objects with generation metadata.\n\nThis method processes JSON that may contain generation information\nfrom previous serialization. It removes the generation metadata\nbefore passing the cleaned JSON to the original `from_sepia` method.\n\n### Parameters\n\n- *sepia_string* : The JSON string potentially containing generation metadata\n- *&block* : A block that calls the original `from_sepia` method\n\n### Example Usage\n\n```\ndef self.from_sepia(json : String) : self\n  GenerationInfo.from_sepia_with_generation(json) do |clean_json|\n    # clean_json has _generation and _base_id removed\n    # Parse and create object normally\n    data = JSON.parse(clean_json)\n    new(data[\"content\"].as_s)\n  end\nend\n```","summary":"<p>Helper method for deserializing objects with generation metadata.</p>","abstract":false,"args":[{"name":"sepia_string","external_name":"sepia_string","restriction":"String"}],"args_string":"(sepia_string : String, &)","args_html":"(sepia_string : String, &)","location":{"filename":"src/sepia/generation_info.cr","line_number":84,"url":null},"def":{"name":"from_sepia_with_generation","args":[{"name":"sepia_string","external_name":"sepia_string","restriction":"String"}],"yields":1,"block_arity":1,"visibility":"Public","body":"data = JSON.parse(sepia_string)\n\n\nif data.has_key?(\"_generation\")\n  data.delete(\"_generation\")\nend\nif data.has_key?(\"_base_id\")\n  data.delete(\"_base_id\")\nend\n\n\nyield data.to_json\n"},"external_var":false}],"instance_methods":[{"html_id":"to_sepia:String-instance-method","name":"to_sepia","doc":"Enhanced serialization method that includes generation metadata.\n\nParses the original JSON from the class's `to_sepia` method,\nadds `_generation` and `_base_id` fields, and returns the\naugmented JSON string.\n\nThe generation metadata helps track:\n- `_generation`: The version number of this object\n- `_base_id`: The base identifier without generation suffix\n\n```\n# When called on an object with ID \"note-123.2\"\nobj.to_sepia # Returns JSON with _generation: 2, _base_id: \"note-123\"\n```","summary":"<p>Enhanced serialization method that includes generation metadata.</p>","abstract":false,"location":{"filename":"src/sepia/generation_info.cr","line_number":54,"url":null},"def":{"name":"to_sepia","return_type":"String","visibility":"Public","body":"data = JSON.parse(super())\ndata[\"_generation\"] = generation\ndata[\"_base_id\"] = base_id\ndata.to_json\n"},"external_var":false}]},{"html_id":"Sepia/Sepia/InMemoryStorage","path":"Sepia/InMemoryStorage.html","kind":"class","full_name":"Sepia::InMemoryStorage","name":"InMemoryStorage","abstract":false,"superclass":{"html_id":"Sepia/Sepia/StorageBackend","kind":"class","full_name":"Sepia::StorageBackend","name":"StorageBackend"},"ancestors":[{"html_id":"Sepia/Sepia/StorageBackend","kind":"class","full_name":"Sepia::StorageBackend","name":"StorageBackend"},{"html_id":"Sepia/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Sepia/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/sepia/in_memory_storage.cr","line_number":30,"url":null}],"repository_name":"Sepia","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"Sepia/Sepia","kind":"module","full_name":"Sepia","name":"Sepia"},"doc":"In-memory storage backend for Sepia objects.\n\nThis backend stores all data in memory hashes without any filesystem\noperations. It's primarily useful for:\n\n- Testing: Fast operations without disk I/O\n- Demos: Self-contained examples that don't persist data\n- Temporary data: Caching or session storage\n\n### Data Structure\n\nThe storage uses three main hashes:\n- `@serializable_storage`: Maps class_name/id to serialized content\n- `@container_storage`: Maps class_name/id to property data and references\n- `@container_references`: Maps container paths to reference mappings\n\n### Example\n\n```\n# Configure Sepia to use in-memory storage\nSepia::Storage.configure(:memory)\n\n# Objects will be stored in memory only\ndoc = MyDocument.new(\"Hello\")\ndoc.save # Stored in @serializable_storage\n```","summary":"<p>In-memory storage backend for Sepia objects.</p>","instance_methods":[{"html_id":"clear-instance-method","name":"clear","doc":"Clears all data from memory storage.\n\nEmpties all internal hashes, effectively resetting the storage\nto its initial empty state.\n\n```\nstorage.clear # All data is now gone\n```","summary":"<p>Clears all data from memory storage.</p>","abstract":false,"location":{"filename":"src/sepia/in_memory_storage.cr","line_number":231,"url":null},"def":{"name":"clear","visibility":"Public","body":"@serializable_storage.clear\n@container_storage.clear\n@container_references.clear\n"},"external_var":false},{"html_id":"count(object_class:Class):Int32-instance-method","name":"count","doc":"Count objects of a given class","summary":"<p>Count objects of a given class</p>","abstract":false,"args":[{"name":"object_class","external_name":"object_class","restriction":"Class"}],"args_string":"(object_class : Class) : Int32","args_html":"(object_class : Class) : Int32","location":{"filename":"src/sepia/in_memory_storage.cr","line_number":219,"url":null},"def":{"name":"count","args":[{"name":"object_class","external_name":"object_class","restriction":"Class"}],"return_type":"Int32","visibility":"Public","body":"(list_all(object_class)).size"},"external_var":false},{"html_id":"delete(class_name:String,id:String)-instance-method","name":"delete","doc":"Delete an object by its class name and ID","summary":"<p>Delete an object by its class name and ID</p>","abstract":false,"args":[{"name":"class_name","external_name":"class_name","restriction":"String"},{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(class_name : String, id : String)","args_html":"(class_name : String, id : String)","location":{"filename":"src/sepia/in_memory_storage.cr","line_number":173,"url":null},"def":{"name":"delete","args":[{"name":"class_name","external_name":"class_name","restriction":"String"},{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"if Sepia.container?(class_name)\n  object_key = \"#{class_name}/#{id}\"\n  @container_storage.delete(object_key)\nelse\n  object_path = File.join(@path, class_name, id)\n  @serializable_storage.delete(object_path)\nend"},"external_var":false},{"html_id":"delete(object:Serializable|Container)-instance-method","name":"delete","doc":"Delete an object","summary":"<p>Delete an object</p>","abstract":false,"args":[{"name":"object","external_name":"object","restriction":"Serializable | Container"}],"args_string":"(object : Serializable | Container)","args_html":"(object : <a href=\"../Sepia/Serializable.html\">Serializable</a> | <a href=\"../Sepia/Container.html\">Container</a>)","location":{"filename":"src/sepia/in_memory_storage.cr","line_number":159,"url":null},"def":{"name":"delete","args":[{"name":"object","external_name":"object","restriction":"Serializable | Container"}],"visibility":"Public","body":"object_key = \"#{object.class.name}/#{object.sepia_id}\"\n\nif object.is_a?(Serializable)\n  @serializable_storage.delete(object_key)\nelsif object.is_a?(Container)\n  @container_storage.delete(object_key)\n\n  @container_references.each do |_path, refs|\n    refs.reject! do |_, target| target.starts_with?(object_key) end\n  end\nend\n"},"external_var":false},{"html_id":"exists?(object_class:Class,id:String):Bool-instance-method","name":"exists?","doc":"Check if an object exists","summary":"<p>Check if an object exists</p>","abstract":false,"args":[{"name":"object_class","external_name":"object_class","restriction":"Class"},{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(object_class : Class, id : String) : Bool","args_html":"(object_class : Class, id : String) : Bool","location":{"filename":"src/sepia/in_memory_storage.cr","line_number":207,"url":null},"def":{"name":"exists?","args":[{"name":"object_class","external_name":"object_class","restriction":"Class"},{"name":"id","external_name":"id","restriction":"String"}],"return_type":"Bool","visibility":"Public","body":"if object_class < Serializable\n  canonical_path = File.join(@path, object_class.to_s, id)\n  @serializable_storage.has_key?(canonical_path)\nelsif object_class < Container\n  object_key = \"#{object_class}/#{id}\"\n  @container_storage.has_key?(object_key)\nelse\n  false\nend"},"external_var":false},{"html_id":"export_data:Hash(String,Array(Hash(String,String)))-instance-method","name":"export_data","doc":"Export all data as a hash structure","summary":"<p>Export all data as a hash structure</p>","abstract":false,"location":{"filename":"src/sepia/in_memory_storage.cr","line_number":237,"url":null},"def":{"name":"export_data","return_type":"Hash(String, Array(Hash(String, String)))","visibility":"Public","body":"data = {} of String => Array(Hash(String, String))\n\n\n@serializable_storage.each do |key, content|\n\n  if key.starts_with?(@path)\n    relative_path = key[(@path.size + 1)..-1]\n    parts = relative_path.split('/')\n    if parts.size == 2\n      class_name, id = parts\n      __temp_143 = class_name\n      data[__temp_143]? || (data[__temp_143] = [] of Hash(String, String))\n      data[class_name] << {\"id\" => id, \"content\" => content}\n    end\n  end\nend\n\n\n@container_storage.each do |key, _|\n  class_name, id = key.split('/', 2)\n  __temp_145 = class_name\n  data[__temp_145]? || (data[__temp_145] = [] of Hash(String, String))\n  data[class_name] << {\"id\" => id, \"type\" => \"container\"}\nend\n\ndata\n"},"external_var":false},{"html_id":"get_container_references(container_path:String):Hash(String,String)-instance-method","name":"get_container_references","abstract":false,"args":[{"name":"container_path","external_name":"container_path","restriction":"String"}],"args_string":"(container_path : String) : Hash(String, String)","args_html":"(container_path : String) : Hash(String, String)","location":{"filename":"src/sepia/in_memory_storage.cr","line_number":302,"url":null},"def":{"name":"get_container_references","args":[{"name":"container_path","external_name":"container_path","restriction":"String"}],"return_type":"Hash(String, String)","visibility":"Public","body":"@container_references[container_path] || ({} of String => String)"},"external_var":false},{"html_id":"get_reference(container_path:String,ref_name:String):String|Nil-instance-method","name":"get_reference","abstract":false,"args":[{"name":"container_path","external_name":"container_path","restriction":"String"},{"name":"ref_name","external_name":"ref_name","restriction":"String"}],"args_string":"(container_path : String, ref_name : String) : String | Nil","args_html":"(container_path : String, ref_name : String) : String | Nil","location":{"filename":"src/sepia/in_memory_storage.cr","line_number":291,"url":null},"def":{"name":"get_reference","args":[{"name":"container_path","external_name":"container_path","restriction":"String"},{"name":"ref_name","external_name":"ref_name","restriction":"String"}],"return_type":"String | ::Nil","visibility":"Public","body":"if refs = @container_references[container_path]?\n  refs[ref_name]?\nend"},"external_var":false},{"html_id":"import_data(data:Hash(String,Array(Hash(String,String))))-instance-method","name":"import_data","doc":"Import data from a hash structure","summary":"<p>Import data from a hash structure</p>","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"Hash(String, Array(Hash(String, String)))"}],"args_string":"(data : Hash(String, Array(Hash(String, String))))","args_html":"(data : Hash(String, Array(Hash(String, String))))","location":{"filename":"src/sepia/in_memory_storage.cr","line_number":264,"url":null},"def":{"name":"import_data","args":[{"name":"data","external_name":"data","restriction":"Hash(String, Array(Hash(String, String)))"}],"visibility":"Public","body":"clear\n\ndata.each do |class_name, objects|\n  objects.each do |obj_data|\n    if obj_data.has_key?(\"content\")\n      id = obj_data[\"id\"]\n\n      key = File.join(@path, class_name, id)\n      @serializable_storage[key] = obj_data[\"content\"]\n    elsif obj_data[\"type\"]? == \"container\"\n      id = obj_data[\"id\"]\n      key = \"#{class_name}/#{id}\"\n      @container_storage[key] = {\"_type\" => \"container\"}\n    end\n  end\nend\n"},"external_var":false},{"html_id":"list_all(object_class:Class):Array(String)-instance-method","name":"list_all","doc":"List all object IDs of a given class","summary":"<p>List all object IDs of a given class</p>","abstract":false,"args":[{"name":"object_class","external_name":"object_class","restriction":"Class"}],"args_string":"(object_class : Class) : Array(String)","args_html":"(object_class : Class) : Array(String)","location":{"filename":"src/sepia/in_memory_storage.cr","line_number":183,"url":null},"def":{"name":"list_all","args":[{"name":"object_class","external_name":"object_class","restriction":"Class"}],"return_type":"Array(String)","visibility":"Public","body":"class_name = object_class.to_s\nids = [] of String\n\nif object_class < Serializable\n  @serializable_storage.each_key do |key|\n\n    canonical_path = File.join(@path, class_name)\n    if key.starts_with?(\"#{canonical_path}/\")\n      id = File.basename(key)\n      ids << id\n    end\n  end\nelsif object_class < Container\n  @container_storage.each_key do |key|\n    if key.starts_with?(\"#{class_name}/\")\n      ids << (key.split('/', 2))[1]\n    end\n  end\nend\n\nids.sort\n"},"external_var":false},{"html_id":"list_all_objects:Hash(String,Array(String))-instance-method","name":"list_all_objects","doc":"List all objects, grouped by class name","summary":"<p>List all objects, grouped by class name</p>","abstract":false,"location":{"filename":"src/sepia/in_memory_storage.cr","line_number":306,"url":null},"def":{"name":"list_all_objects","return_type":"Hash(String, Array(String))","visibility":"Public","body":"objects = Hash(String, Array(String)).new do |hash, key| hash[key] = [] of String end\nprefix = @path + \"/\"\n\n@serializable_storage.each_key do |key|\n  if key.starts_with?(prefix)\n    class_and_id = key[prefix.size..-1]\n    parts = class_and_id.split('/')\n    if parts.size == 2\n      class_name, id = parts\n      objects[class_name] << id\n    end\n  end\nend\n\n@container_storage.each_key do |key|\n\n  class_name, id = key.split('/', 2)\n  objects[class_name] << id\nend\n\nobjects\n"},"external_var":false},{"html_id":"load(object_class:Class,id:String,path:String|Nil=nil):Object-instance-method","name":"load","doc":"Loads an object from memory storage.\n\nRetrieves and deserializes an object of the specified class.\nFor Serializable objects, uses the class's `from_sepia` method.\nFor Container objects, restores primitive properties from JSON and\nloads references if a path is provided.\n\nRaises an exception if the object is not found.\n\n```\n# Load a Serializable object\ndoc = storage.load(MyDocument, \"doc-uuid\")\n\n# Load a Container object\nboard = storage.load(MyBoard, \"board-uuid\")\n```","summary":"<p>Loads an object from memory storage.</p>","abstract":false,"args":[{"name":"object_class","external_name":"object_class","restriction":"Class"},{"name":"id","external_name":"id","restriction":"String"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"args_string":"(object_class : Class, id : String, path : String | Nil = nil) : Object","args_html":"(object_class : Class, id : String, path : String | Nil = <span class=\"n\">nil</span>) : <a href=\"../Sepia/Object.html\">Object</a>","location":{"filename":"src/sepia/in_memory_storage.cr","line_number":117,"url":null},"def":{"name":"load","args":[{"name":"object_class","external_name":"object_class","restriction":"Class"},{"name":"id","external_name":"id","restriction":"String"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"return_type":"Object","visibility":"Public","body":"case\nwhen object_class.responds_to?(:from_sepia)\n  object_path = path || (File.join(@path, object_class.to_s, id))\n\n  if @serializable_storage.has_key?(object_path)\n  else\n    raise(\"Object with ID #{id} not found in storage for type #{object_class}\")\n  end\n\n  obj = object_class.from_sepia(@serializable_storage[object_path])\n  obj.sepia_id = id\n  obj\nwhen object_class < Container\n  object_key = \"#{object_class}/#{id}\"\n\n  if @container_storage.has_key?(object_key)\n  else\n    raise(\"Object with ID #{id} not found in storage for type #{object_class}\")\n  end\n\n  obj = object_class.new\n  obj.sepia_id = id\n\n\n  if data = @container_storage[object_key][\"_data\"]?\n    if data.empty?\n    else\n      (obj.as(Container)).restore_properties_from_json(data)\n    end\n  end\n\n\n  if path\n    (obj.as(Container)).load_references(path)\n  end\n\n  obj\nelse\n  raise(\"Unsupported class for Sepia storage: #{object_class.name}\")\nend"},"external_var":false},{"html_id":"save(object:Container,path:String|Nil=nil)-instance-method","name":"save","doc":"Saves a Container object to memory storage.\n\nStores the container's metadata and primitive properties in the\n`@container_storage` hash. Primitive properties are serialized to JSON\nand stored under the \"_data\" key.\n\n```\nboard = Board.new(\"My Board\")\nstorage = InMemoryStorage.new\nstorage.save(board) # Stored in @container_storage\n```","summary":"<p>Saves a Container object to memory storage.</p>","abstract":false,"args":[{"name":"object","external_name":"object","restriction":"Container"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"args_string":"(object : Container, path : String | Nil = nil)","args_html":"(object : <a href=\"../Sepia/Container.html\">Container</a>, path : String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/sepia/in_memory_storage.cr","line_number":85,"url":null},"def":{"name":"save","args":[{"name":"object","external_name":"object","restriction":"Container"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"visibility":"Public","body":"object_key = \"#{object.class.name}/#{object.sepia_id}\"\n@container_storage[object_key] = {} of String => String\n\n\n@container_storage[object_key][\"_type\"] = \"container\"\n\n\n@container_storage[object_key][\"_data\"] = object.to_filtered_json\n\n\nif path\n  object.save_references(path)\nend\n"},"external_var":false},{"html_id":"save(object:Serializable,path:String|Nil=nil)-instance-method","name":"save","doc":"Saves a Serializable object to memory storage.\n\nStores the object's serialized content in the `@serializable_storage` hash.\nThe key is the full path (including the base path) to maintain\ncompatibility with FileStorage.\n\n```\ndoc = MyDocument.new(\"Hello\")\nstorage = InMemoryStorage.new\nstorage.save(doc) # Stored in @serializable_storage\n```","summary":"<p>Saves a Serializable object to memory storage.</p>","abstract":false,"args":[{"name":"object","external_name":"object","restriction":"Serializable"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"args_string":"(object : Serializable, path : String | Nil = nil)","args_html":"(object : <a href=\"../Sepia/Serializable.html\">Serializable</a>, path : String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/sepia/in_memory_storage.cr","line_number":66,"url":null},"def":{"name":"save","args":[{"name":"object","external_name":"object","restriction":"Serializable"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"visibility":"Public","body":"object_path = path || (File.join(@path, object.class.name, object.sepia_id))\ncontent = object.to_sepia\n\n\n@serializable_storage[object_path] = content\n"},"external_var":false},{"html_id":"store_container_reference(container_path:String,ref_name:String,target_container:Container)-instance-method","name":"store_container_reference","abstract":false,"args":[{"name":"container_path","external_name":"container_path","restriction":"String"},{"name":"ref_name","external_name":"ref_name","restriction":"String"},{"name":"target_container","external_name":"target_container","restriction":"Container"}],"args_string":"(container_path : String, ref_name : String, target_container : Container)","args_html":"(container_path : String, ref_name : String, target_container : <a href=\"../Sepia/Container.html\">Container</a>)","location":{"filename":"src/sepia/in_memory_storage.cr","line_number":297,"url":null},"def":{"name":"store_container_reference","args":[{"name":"container_path","external_name":"container_path","restriction":"String"},{"name":"ref_name","external_name":"ref_name","restriction":"String"},{"name":"target_container","external_name":"target_container","restriction":"Container"}],"visibility":"Public","body":"__temp_149 = container_path\n@container_references[__temp_149]? || (@container_references[__temp_149] = {} of String => String)\n@container_references[container_path][ref_name] = \"#{target_container.class.name}/#{target_container.sepia_id}\"\n"},"external_var":false},{"html_id":"store_reference(container_path:String,ref_name:String,target_class:String,target_id:String)-instance-method","name":"store_reference","doc":"Methods to support container references (for internal use by Container module)","summary":"<p>Methods to support container references (for internal use by Container module)</p>","abstract":false,"args":[{"name":"container_path","external_name":"container_path","restriction":"String"},{"name":"ref_name","external_name":"ref_name","restriction":"String"},{"name":"target_class","external_name":"target_class","restriction":"String"},{"name":"target_id","external_name":"target_id","restriction":"String"}],"args_string":"(container_path : String, ref_name : String, target_class : String, target_id : String)","args_html":"(container_path : String, ref_name : String, target_class : String, target_id : String)","location":{"filename":"src/sepia/in_memory_storage.cr","line_number":286,"url":null},"def":{"name":"store_reference","args":[{"name":"container_path","external_name":"container_path","restriction":"String"},{"name":"ref_name","external_name":"ref_name","restriction":"String"},{"name":"target_class","external_name":"target_class","restriction":"String"},{"name":"target_id","external_name":"target_id","restriction":"String"}],"visibility":"Public","body":"__temp_147 = container_path\n@container_references[__temp_147]? || (@container_references[__temp_147] = {} of String => String)\n@container_references[container_path][ref_name] = \"#{target_class}/#{target_id}\"\n"},"external_var":false}]},{"html_id":"Sepia/Sepia/Object","path":"Sepia/Object.html","kind":"class","full_name":"Sepia::Object","name":"Object","abstract":false,"superclass":{"html_id":"Sepia/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"Sepia/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Sepia/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/sepia/object.cr","line_number":34,"url":null}],"repository_name":"Sepia","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"Sepia/Sepia","kind":"module","full_name":"Sepia","name":"Sepia"},"doc":"Base class for all objects managed by Sepia.\n\nProvides generation tracking functionality for optimistic concurrency control,\nautomatic ID generation with UUIDs, and core persistence methods.\n\nAll classes that use Sepia's serialization features must inherit from this class.\n\n### Example\n\n```\nclass MyDocument < Sepia::Object\n  include Sepia::Serializable\n\n  property content : String\n\n  def initialize(@content = \"\")\n  end\n\n  def to_sepia : String\n    @content\n  end\n\n  def self.from_sepia(sepia_string : String) : self\n    new(sepia_string)\n  end\nend\n\ndoc = MyDocument.new(\"Hello, World!\")\ndoc.save # Saves to storage with auto-generated UUID\n```","summary":"<p>Base class for all objects managed by Sepia.</p>","class_methods":[{"html_id":"exists?(id:String):Bool-class-method","name":"exists?","doc":"Check if an object with the given ID exists in storage.\n\nReturns `true` if an object of this class with the specified ID exists,\n`false` otherwise. This is useful for checking existence before loading\nor verifying if a specific generation exists.\n\n```\n# Check if a specific version exists\nif Document.exists?(\"doc-123.2\")\n  puts \"Version 2 exists\"\nelse\n  puts \"Version 2 does not exist\"\nend\n\n# Check for existence of legacy object (generation 0)\nDocument.exists?(\"legacy-doc\") # => true if exists\n\n# Common pattern: check before creating new generation\nunless Document.exists?(\"doc-123.3\")\n  # Safe to create version 3\nend\n```","summary":"<p>Check if an object with the given ID exists in storage.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String) : Bool","args_html":"(id : String) : Bool","location":{"filename":"src/sepia/object.cr","line_number":286,"url":null},"def":{"name":"exists?","args":[{"name":"id","external_name":"id","restriction":"String"}],"return_type":"Bool","visibility":"Public","body":"backend = Sepia::Storage.backend\n\nif backend.is_a?(FileStorage)\n  object_path = File.join(backend.path, self.name, id)\n  File.exists?(object_path)\nelse\n  begin\n    self.load(id)\n    true\n  rescue\n    false\n  end\nend\n"},"external_var":false},{"html_id":"generation_separator-class-method","name":"generation_separator","doc":"Separator character used between base ID and generation number.\n\nDefault is \".\" which creates IDs like \"note-123.1\", \"note-123.2\".\nCan be overridden per class if needed.\n\n```\nclass CustomNote < Sepia::Object\n  class_property generation_separator = \"_\"\nend\n\nnote = CustomNote.new\nnote.save_with_generation # ID becomes \"note-uuid_1\"\n```","summary":"<p>Separator character used between base ID and generation number.</p>","abstract":false,"location":{"filename":"src/sepia/object.cr","line_number":48,"url":null},"def":{"name":"generation_separator","visibility":"Public","body":"@@generation_separator"},"external_var":false},{"html_id":"generation_separator=(generation_separator:String)-class-method","name":"generation_separator=","doc":"Separator character used between base ID and generation number.\n\nDefault is \".\" which creates IDs like \"note-123.1\", \"note-123.2\".\nCan be overridden per class if needed.\n\n```\nclass CustomNote < Sepia::Object\n  class_property generation_separator = \"_\"\nend\n\nnote = CustomNote.new\nnote.save_with_generation # ID becomes \"note-uuid_1\"\n```","summary":"<p>Separator character used between base ID and generation number.</p>","abstract":false,"args":[{"name":"generation_separator","external_name":"generation_separator","restriction":"::String"}],"args_string":"(generation_separator : String)","args_html":"(generation_separator : String)","location":{"filename":"src/sepia/object.cr","line_number":48,"url":null},"def":{"name":"generation_separator=","args":[{"name":"generation_separator","external_name":"generation_separator","restriction":"::String"}],"visibility":"Public","body":"@@generation_separator = generation_separator"},"external_var":false},{"html_id":"latest(base_id:String):self|Nil-class-method","name":"latest","doc":"Find the latest version of an object by its base ID.\n\nReturns the object with the highest generation number, or `nil` if no versions exist.\nThis is useful for always retrieving the most recent version of an object.\n\n```\n# Get the latest version of a document\nlatest_doc = Document.latest(\"doc-123\")\nif latest_doc\n  puts \"Latest version: #{latest_doc.generation}\"\n  puts \"Content: #{latest_doc.content}\"\nend\n\n# Always returns nil for non-existent base IDs\nDocument.latest(\"non-existent\") # => nil\n```","summary":"<p>Find the latest version of an object by its base ID.</p>","abstract":false,"args":[{"name":"base_id","external_name":"base_id","restriction":"String"}],"args_string":"(base_id : String) : self | Nil","args_html":"(base_id : String) : <span class=\"k\">self</span> | Nil","location":{"filename":"src/sepia/object.cr","line_number":180,"url":null},"def":{"name":"latest","args":[{"name":"base_id","external_name":"base_id","restriction":"String"}],"return_type":"self | ::Nil","visibility":"Public","body":"all_versions = versions(base_id)\nall_versions.max_by(&.generation)\n"},"external_var":false},{"html_id":"versions(base_id:String):Array(self)-class-method","name":"versions","doc":"Find all versions of an object by its base ID.\n\nReturns an array of all object versions, sorted by generation number in ascending order.\nThis allows you to access the complete version history of an object.\n\n```\n# Get all versions of a document\nall_versions = Document.versions(\"doc-123\")\n\n# Print version history\nall_versions.each do |version|\n  puts \"Version #{version.generation}: #{version.created_at}\"\nend\n\n# versions are sorted by generation\nall_versions.first.generation # => 0 (oldest)\nall_versions.last.generation  # => 2 (newest)\n```\n\nNote: For FileStorage, this scans the directory and may be slow with many versions.\nConsider caching or cleanup strategies for long-running applications.","summary":"<p>Find all versions of an object by its base ID.</p>","abstract":false,"args":[{"name":"base_id","external_name":"base_id","restriction":"String"}],"args_string":"(base_id : String) : Array(self)","args_html":"(base_id : String) : Array(<span class=\"k\">self</span>)","location":{"filename":"src/sepia/object.cr","line_number":206,"url":null},"def":{"name":"versions","args":[{"name":"base_id","external_name":"base_id","restriction":"String"}],"return_type":"Array(self)","visibility":"Public","body":"backend = Sepia::Storage.backend\n\nversions = [] of self\nif backend.is_a?(FileStorage)\n  class_dir = File.join(backend.path, self.name)\n  if Dir.exists?(class_dir)\n  else\n    return versions\n  end\n\n  Dir.each_child(class_dir) do |filename|\n    if filename == base_id\n      begin\n        obj = self.load(filename)\n        versions << obj\n      rescue\n      end\n    elsif filename.starts_with?(\"#{base_id}#{generation_separator}\")\n      gen_part = filename[(base_id.size + generation_separator.size)..-1]\n      if gen_part.matches?(/^\\d+$/)\n        begin\n          obj = self.load(filename)\n          versions << obj\n        rescue\n        end\n      end\n    end\n  end\nelse\n  gen = 0\n  loop do\n    begin\n      obj = self.load(\"#{base_id}#{generation_separator}#{gen}\")\n      versions << obj\n      gen = gen + 1\n    rescue\n      break\n    end\n  end\n\n\n  if versions.empty?\n    begin\n      obj = self.load(base_id)\n      versions << obj\n    rescue\n    end\n  end\nend\n\nversions.sort_by(&.generation)\n"},"external_var":false}],"constructors":[{"html_id":"load(id:String,path:String|Nil=nil):self-class-method","name":"load","doc":"Loads an object from storage.\n\nDeserializes and returns an object of the specified class with the given ID.\nFor Serializable objects, uses the class's `from_sepia` method.\nFor Container objects, reconstructs the object from its directory structure.\n\nThe optional `path` parameter specifies where to load the object from.\n\n```\n# Load from canonical location\ndoc = MyDocument.load(\"doc-uuid\")\n\n# Load from specific path\ndoc = MyDocument.load(\"doc-uuid\", \"/custom/path\")\n```","summary":"<p>Loads an object from storage.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"args_string":"(id : String, path : String | Nil = nil) : self","args_html":"(id : String, path : String | Nil = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","location":{"filename":"src/sepia/object.cr","line_number":337,"url":null},"def":{"name":"load","args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"return_type":"self","visibility":"Public","body":"Sepia::Storage::INSTANCE.load(self, id, path)"},"external_var":false}],"instance_methods":[{"html_id":"base_id:String-instance-method","name":"base_id","doc":"Returns the base ID without the generation suffix.\n\nThe base ID is the unique identifier that remains constant across all generations.\n\n```\nobj.sepia_id = \"note-123.2\"\nobj.base_id # => \"note-123\"\n\nobj.sepia_id = \"legacy-note\"\nobj.base_id # => \"legacy-note\"\n```","summary":"<p>Returns the base ID without the generation suffix.</p>","abstract":false,"location":{"filename":"src/sepia/object.cr","line_number":112,"url":null},"def":{"name":"base_id","return_type":"String","visibility":"Public","body":"parts = @sepia_id.split(self.class.generation_separator)\nif parts.size > 1 && (parts.last.matches?(/^\\d+$/))\n  parts[0..-2].join(self.class.generation_separator)\nelse\n  @sepia_id\nend\n"},"external_var":false},{"html_id":"canonical_path:String-instance-method","name":"canonical_path","doc":"Returns the canonical path for this object in storage.\n\nThe canonical path follows the pattern: `{storage_path}/{ClassName}/{sepia_id}`.\nThis is where Serializable objects are stored by default.\n\n```\ndoc = MyDocument.new\ndoc.sepia_id = \"my-doc\"\ndoc.canonical_path # => \"/tmp/storage/MyDocument/my-doc\"\n```","summary":"<p>Returns the canonical path for this object in storage.</p>","abstract":false,"location":{"filename":"src/sepia/object.cr","line_number":364,"url":null},"def":{"name":"canonical_path","return_type":"String","visibility":"Public","body":"File.join(Sepia::Storage::INSTANCE.path, self.class.name, sepia_id)"},"external_var":false},{"html_id":"delete-instance-method","name":"delete","doc":"Deletes the object from storage.\n\nRemoves the object's file or directory from storage. For Container objects,\nalso cleans up any nested objects and references.\n\n```\ndoc = MyDocument.load(\"doc-uuid\")\ndoc.delete # Removes the document from storage\n```","summary":"<p>Deletes the object from storage.</p>","abstract":false,"location":{"filename":"src/sepia/object.cr","line_number":350,"url":null},"def":{"name":"delete","visibility":"Public","body":"Sepia::Storage::INSTANCE.delete(self)"},"external_var":false},{"html_id":"generation:Int32-instance-method","name":"generation","doc":"Returns the generation number extracted from the object's ID.\n\nFor IDs without a generation suffix, returns 0.\n\n```\nobj.sepia_id = \"note-123.2\"\nobj.generation # => 2\n\nobj.sepia_id = \"legacy-note\"\nobj.generation # => 0\n```","summary":"<p>Returns the generation number extracted from the object's ID.</p>","abstract":false,"location":{"filename":"src/sepia/object.cr","line_number":92,"url":null},"def":{"name":"generation","return_type":"Int32","visibility":"Public","body":"parts = @sepia_id.split(self.class.generation_separator)\nif parts.size > 1 && (parts.last.matches?(/^\\d+$/))\n  parts.last.to_i\nelse\n  0\nend\n"},"external_var":false},{"html_id":"save(path:String|Nil=nil)-instance-method","name":"save","doc":"Saves the object to storage.\n\nFor Serializable objects, serializes the object using its `to_sepia` method.\nFor Container objects, creates a directory structure and saves all nested objects.\n\nThe optional `path` parameter specifies where to save the object. If not provided,\nuses the canonical path based on the object's class and sepia_id.\n\n```\ndoc = MyDocument.new(\"Hello\")\ndoc.save # Saves to default location\n\n# Save to specific path\ndoc.save(\"/custom/path\")\n```","summary":"<p>Saves the object to storage.</p>","abstract":false,"args":[{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"args_string":"(path : String | Nil = nil)","args_html":"(path : String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/sepia/object.cr","line_number":318,"url":null},"def":{"name":"save","args":[{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"visibility":"Public","body":"Sepia::Storage::INSTANCE.save(self, path)"},"external_var":false},{"html_id":"save_with_generation:self-instance-method","name":"save_with_generation","doc":"Creates a new version of this object with an incremented generation number.\n\nReturns a new object instance with the same attributes but a new ID\ncontaining the next generation number. The original object is not modified.\n\n```\nobj.sepia_id = \"note-123.2\"\nnew_obj = obj.save_with_generation\nnew_obj.sepia_id # => \"note-123.3\"\n```\n\nNOTE: This method requires the class to implement `to_sepia` and `from_sepia`\nfor Serializable objects. For Container objects, override this method.","summary":"<p>Creates a new version of this object with an incremented generation number.</p>","abstract":false,"location":{"filename":"src/sepia/object.cr","line_number":147,"url":null},"def":{"name":"save_with_generation","return_type":"self","visibility":"Public","body":"new_id = \"#{base_id}#{self.class.generation_separator}#{generation + 1}\"\n\n\nif (self.responds_to?(:to_sepia)) && (self.class.responds_to?(:from_sepia))\n  new_obj = self.class.from_sepia(self.to_sepia)\n  new_obj.sepia_id = new_id\n  new_obj.save\n  new_obj\nelse\n  raise(\"save_with_generation not implemented for #{self.class.name}. \" + \"Either implement to_sepia/from_sepia or override save_with_generation.\")\nend\n"},"external_var":false},{"html_id":"sepia_id:String-instance-method","name":"sepia_id","doc":"Unique identifier for this object.\n\nDefaults to a randomly generated UUIDv4 string. Can be manually set\nfor specific use cases or when restoring objects with known IDs.\n\nThe ID format may include generation suffixes for version tracking:\n- Without generation: \"note-123e4567-e89b-12d3-a456-426614174000\"\n- With generation: \"note-123e4567-e89b-12d3-a456-426614174000.1\"\n\n```\nobj = MyClass.new\nobj.sepia_id # => \"myclass-uuid-string\"\n\n# Manually set ID\nobj.sepia_id = \"custom-id\"\n```","summary":"<p>Unique identifier for this object.</p>","abstract":false,"location":{"filename":"src/sepia/object.cr","line_number":66,"url":null},"def":{"name":"sepia_id","return_type":"String","visibility":"Public","body":"@sepia_id"},"external_var":false},{"html_id":"sepia_id=(id:String)-instance-method","name":"sepia_id=","doc":"Sets the unique identifier for this object.\n\nUse this when you need to control the object's ID, such as when\nrestoring from external data or maintaining specific naming conventions.\n\n```\nobj = MyClass.new\nobj.sepia_id = \"document-2024-001\"\n```","summary":"<p>Sets the unique identifier for this object.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/sepia/object.cr","line_number":77,"url":null},"def":{"name":"sepia_id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@sepia_id = id"},"external_var":false},{"html_id":"stale?(expected_generation:Int32):Bool-instance-method","name":"stale?","doc":"Checks if a newer version of this object exists.\n\nReturns true if an object with ID `base_id.(expected_generation + 1)` exists.\nThis is useful for optimistic concurrency control.\n\n```\nobj.sepia_id = \"note-123.2\"\nobj.stale?(2) # => true if \"note-123.3\" exists\n```","summary":"<p>Checks if a newer version of this object exists.</p>","abstract":false,"args":[{"name":"expected_generation","external_name":"expected_generation","restriction":"Int32"}],"args_string":"(expected_generation : Int32) : Bool","args_html":"(expected_generation : Int32) : Bool","location":{"filename":"src/sepia/object.cr","line_number":130,"url":null},"def":{"name":"stale?","args":[{"name":"expected_generation","external_name":"expected_generation","restriction":"Int32"}],"return_type":"Bool","visibility":"Public","body":"self.class.exists?(\"#{base_id}#{self.class.generation_separator}#{expected_generation + 1}\")"},"external_var":false}]},{"html_id":"Sepia/Sepia/Serializable","path":"Sepia/Serializable.html","kind":"module","full_name":"Sepia::Serializable","name":"Serializable","abstract":false,"locations":[{"filename":"src/sepia/serializable.cr","line_number":69,"url":null}],"repository_name":"Sepia","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"Sepia/Sepia","kind":"module","full_name":"Sepia","name":"Sepia"},"doc":"Module for objects that serialize to a single file.\n\nThe `Serializable` module provides a contract for objects that can be\nserialized to and deserialized from a single string representation.\nClasses including this module must implement two methods:\n\n- `to_sepia : String` - Serializes the object to a string\n- `self.from_sepia(sepia_string : String)` - Creates an object from a string\n\n## File Storage\n\nSerializable objects are stored as individual files in the filesystem.\nThe file contains the exact string returned by `to_sepia`.\n\n### Example\n\n```\nclass SimpleNote < Sepia::Object\n  include Sepia::Serializable\n\n  property text : String\n\n  def initialize(@text = \"\")\n  end\n\n  # Serialize to a simple string\n  def to_sepia : String\n    @text\n  end\n\n  # Deserialize from a string\n  def self.from_sepia(sepia_string : String) : self\n    new(sepia_string)\n  end\nend\n\nnote = SimpleNote.new(\"Hello, World!\")\nnote.save # Creates a file containing \"Hello, World!\"\n\nloaded = SimpleNote.load(note.sepia_id)\nloaded.text # => \"Hello, World!\"\n```\n\n### JSON Serialization\n\nFor more complex objects, you can serialize to JSON:\n\n```\nclass User < Sepia::Object\n  include Sepia::Serializable\n\n  property name : String\n  property email : String\n\n  def initialize(@name = \"\", @email = \"\")\n  end\n\n  def to_sepia : String\n    {name: @name, email: @email}.to_json\n  end\n\n  def self.from_sepia(json : String) : self\n    data = JSON.parse(json)\n    new(data[\"name\"].as_s, data[\"email\"].as_s)\n  end\nend\n```","summary":"<p>Module for objects that serialize to a single file.</p>","instance_methods":[{"html_id":"sepia_references:Enumerable(Sepia::Object)-instance-method","name":"sepia_references","doc":"Returns all Sepia objects referenced by this object.\n\nThis method is used by the garbage collector to track object\nrelationships. By default, Serializable objects don't reference\nother Sepia objects.\n\nOverride this method if your Serializable contains references\nto other Sepia objects that should be tracked.\n\n### Returns\n\nAn Enumerable of Sepia::Object instances referenced by this object.\n\n### Example\n\n```\nclass Document < Sepia::Object\n  include Sepia::Serializable\n\n  property author : User\n\n  def sepia_references : Enumerable(Sepia::Object)\n    [@author] if @author\n  end\nend\n```","summary":"<p>Returns all Sepia objects referenced by this object.</p>","abstract":false,"location":{"filename":"src/sepia/serializable.cr","line_number":157,"url":null},"def":{"name":"sepia_references","return_type":"Enumerable(Sepia::Object)","visibility":"Public","body":"[] of Sepia::Object"},"external_var":false}]},{"html_id":"Sepia/Sepia/Storage","path":"Sepia/Storage.html","kind":"class","full_name":"Sepia::Storage","name":"Storage","abstract":false,"superclass":{"html_id":"Sepia/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"Sepia/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Sepia/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/sepia/storage.cr","line_number":33,"url":null}],"repository_name":"Sepia","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"INSTANCE","name":"INSTANCE","value":"new","doc":"Legacy singleton instance for backward compatibility.\n\nProvides the same API as the class methods for existing code\nthat relies on the singleton pattern.","summary":"<p>Legacy singleton instance for backward compatibility.</p>"}],"namespace":{"html_id":"Sepia/Sepia","kind":"module","full_name":"Sepia","name":"Sepia"},"doc":"Central storage management class.\n\nThe `Storage` class manages pluggable storage backends and provides\nboth a modern class-based API and backward compatibility with the\noriginal singleton pattern.\n\n### Supported Backends\n\n- `:filesystem` - Default file-based storage (FileStorage)\n- `:memory` - In-memory storage for testing (InMemoryStorage)\n\n### Usage\n\n```\n# Configure storage backend\nSepia::Storage.configure(:filesystem, {\"path\" => \"./data\"})\n\n# Or use in-memory storage\nSepia::Storage.configure(:memory)\n\n# Class-based API (recommended)\nSepia::Storage.save(my_object)\nloaded = Sepia::Storage.load(MyClass, \"object-id\")\n\n# Legacy singleton API (still supported)\nSepia::Storage::INSTANCE.save(my_object)\nloaded = Sepia::Storage::INSTANCE.load(MyClass, \"object-id\")\n```","summary":"<p>Central storage management class.</p>","class_methods":[{"html_id":"backend-class-method","name":"backend","doc":"Returns the current storage backend.\n\n### Returns\n\nThe currently active StorageBackend instance.\n\n### Example\n\n```\nbackend = Sepia::Storage.backend\nputs backend.class # => FileStorage or InMemoryStorage\n```","summary":"<p>Returns the current storage backend.</p>","abstract":false,"location":{"filename":"src/sepia/storage.cr","line_number":58,"url":null},"def":{"name":"backend","visibility":"Public","body":"@@current_backend"},"external_var":false},{"html_id":"backend=(backend:StorageBackend)-class-method","name":"backend=","doc":"Sets the current storage backend.\n\nAllows switching to a different backend implementation at runtime.\n\n### Parameters\n\n- *backend* : A StorageBackend instance to use\n\n### Example\n\n```\n# Switch to custom backend\ncustom_backend = MyCustomStorage.new\nSepia::Storage.backend = custom_backend\n```","summary":"<p>Sets the current storage backend.</p>","abstract":false,"args":[{"name":"backend","external_name":"backend","restriction":"StorageBackend"}],"args_string":"(backend : StorageBackend)","args_html":"(backend : <a href=\"../Sepia/StorageBackend.html\">StorageBackend</a>)","location":{"filename":"src/sepia/storage.cr","line_number":77,"url":null},"def":{"name":"backend=","args":[{"name":"backend","external_name":"backend","restriction":"StorageBackend"}],"visibility":"Public","body":"@@current_backend = backend"},"external_var":false},{"html_id":"clear-class-method","name":"clear","doc":"Bulk operations","summary":"<p>Bulk operations</p>","abstract":false,"location":{"filename":"src/sepia/storage.cr","line_number":221,"url":null},"def":{"name":"clear","visibility":"Public","body":"@@current_backend.clear"},"external_var":false},{"html_id":"configure(backend:Symbol,config={}ofString=>String)-class-method","name":"configure","doc":"Configures storage using a named backend.\n\nProvides a convenient way to configure common backends without\ninstantiating them manually.\n\n### Parameters\n\n- *backend* : Symbol identifying the backend type (`:filesystem` or `:memory`)\n- *config* : Optional configuration hash for the backend\n\n### Configuration Options\n\nFor `:filesystem` backend:\n- `\"path\"`: Root directory path (defaults to system temp directory)\n\nFor `:memory` backend:\n- No configuration options available\n\n### Example\n\n```\n# Configure filesystem storage with custom path\nSepia::Storage.configure(:filesystem, {\"path\" => \"./app_data\"})\n\n# Configure in-memory storage\nSepia::Storage.configure(:memory)\n```","summary":"<p>Configures storage using a named backend.</p>","abstract":false,"args":[{"name":"backend","external_name":"backend","restriction":"Symbol"},{"name":"config","default_value":"{} of String => String","external_name":"config","restriction":""}],"args_string":"(backend : Symbol, config = {} of String => String)","args_html":"(backend : Symbol, config = {} <span class=\"k\">of</span> <span class=\"t\">String</span> <span class=\"o\">=&gt;</span> <span class=\"t\">String</span>)","location":{"filename":"src/sepia/storage.cr","line_number":108,"url":null},"def":{"name":"configure","args":[{"name":"backend","external_name":"backend","restriction":"Symbol"},{"name":"config","default_value":"{} of String => String","external_name":"config","restriction":""}],"visibility":"Public","body":"case backend\nwhen :filesystem\n  path = config[\"path\"]? || Dir.tempdir\n  self.backend = FileStorage.new(path)\nwhen :memory\n  self.backend = InMemoryStorage.new\nelse\n  raise(\"Unknown storage backend: #{backend}\")\nend"},"external_var":false},{"html_id":"count(object_class:Class):Int32-class-method","name":"count","abstract":false,"args":[{"name":"object_class","external_name":"object_class","restriction":"Class"}],"args_string":"(object_class : Class) : Int32","args_html":"(object_class : Class) : Int32","location":{"filename":"src/sepia/storage.cr","line_number":216,"url":null},"def":{"name":"count","args":[{"name":"object_class","external_name":"object_class","restriction":"Class"}],"return_type":"Int32","visibility":"Public","body":"@@current_backend.count(object_class)"},"external_var":false},{"html_id":"delete(class_name:String,id:String)-class-method","name":"delete","abstract":false,"args":[{"name":"class_name","external_name":"class_name","restriction":"String"},{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(class_name : String, id : String)","args_html":"(class_name : String, id : String)","location":{"filename":"src/sepia/storage.cr","line_number":233,"url":null},"def":{"name":"delete","args":[{"name":"class_name","external_name":"class_name","restriction":"String"},{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@@current_backend.delete(class_name, id)"},"external_var":false},{"html_id":"exists?(object_class:Class,id:String):Bool-class-method","name":"exists?","abstract":false,"args":[{"name":"object_class","external_name":"object_class","restriction":"Class"},{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(object_class : Class, id : String) : Bool","args_html":"(object_class : Class, id : String) : Bool","location":{"filename":"src/sepia/storage.cr","line_number":212,"url":null},"def":{"name":"exists?","args":[{"name":"object_class","external_name":"object_class","restriction":"Class"},{"name":"id","external_name":"id","restriction":"String"}],"return_type":"Bool","visibility":"Public","body":"@@current_backend.exists?(object_class, id)"},"external_var":false},{"html_id":"export_data:Hash(String,Array(Hash(String,String)))-class-method","name":"export_data","abstract":false,"location":{"filename":"src/sepia/storage.cr","line_number":225,"url":null},"def":{"name":"export_data","return_type":"Hash(String, Array(Hash(String, String)))","visibility":"Public","body":"@@current_backend.export_data"},"external_var":false},{"html_id":"gc(roots:Enumerable(Sepia::Object),dry_run:Bool=false):Hash(String,Array(String))-class-method","name":"gc","abstract":false,"args":[{"name":"roots","external_name":"roots","restriction":"Enumerable(Sepia::Object)"},{"name":"dry_run","default_value":"false","external_name":"dry_run","restriction":"Bool"}],"args_string":"(roots : Enumerable(Sepia::Object), dry_run : Bool = false) : Hash(String, Array(String))","args_html":"(roots : Enumerable(<a href=\"../Sepia/Object.html\">Sepia::Object</a>), dry_run : Bool = <span class=\"n\">false</span>) : Hash(String, Array(String))","location":{"filename":"src/sepia/storage.cr","line_number":241,"url":null},"def":{"name":"gc","args":[{"name":"roots","external_name":"roots","restriction":"Enumerable(Sepia::Object)"},{"name":"dry_run","default_value":"false","external_name":"dry_run","restriction":"Bool"}],"return_type":"Hash(String, Array(String))","visibility":"Public","body":"live_object_keys = Set(String).new\nroots.each do |obj|\n  mark_live_objects(obj, live_object_keys)\nend\n\n\ndeleted_keys = Hash(String, Array(String)).new do |hash, key| hash[key] = [] of String end\nall_objects = list_all_objects\n\nall_objects.each do |class_name, ids|\n  ids.each do |id|\n    key = \"#{class_name}/#{id}\"\n    if live_object_keys.includes?(key)\n    else\n      deleted_keys[class_name] << id\n      if dry_run\n      else\n        delete(class_name, id)\n      end\n    end\n  end\nend\n\ndeleted_keys\n"},"external_var":false},{"html_id":"import_data(data:Hash(String,Array(Hash(String,String))))-class-method","name":"import_data","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"Hash(String, Array(Hash(String, String)))"}],"args_string":"(data : Hash(String, Array(Hash(String, String))))","args_html":"(data : Hash(String, Array(Hash(String, String))))","location":{"filename":"src/sepia/storage.cr","line_number":229,"url":null},"def":{"name":"import_data","args":[{"name":"data","external_name":"data","restriction":"Hash(String, Array(Hash(String, String)))"}],"visibility":"Public","body":"@@current_backend.import_data(data)"},"external_var":false},{"html_id":"list_all(object_class:Class):Array(String)-class-method","name":"list_all","doc":"Discovery API - delegates to current backend","summary":"<p>Discovery API - delegates to current backend</p>","abstract":false,"args":[{"name":"object_class","external_name":"object_class","restriction":"Class"}],"args_string":"(object_class : Class) : Array(String)","args_html":"(object_class : Class) : Array(String)","location":{"filename":"src/sepia/storage.cr","line_number":208,"url":null},"def":{"name":"list_all","args":[{"name":"object_class","external_name":"object_class","restriction":"Class"}],"return_type":"Array(String)","visibility":"Public","body":"@@current_backend.list_all(object_class)"},"external_var":false},{"html_id":"list_all_objects:Hash(String,Array(String))-class-method","name":"list_all_objects","abstract":false,"location":{"filename":"src/sepia/storage.cr","line_number":237,"url":null},"def":{"name":"list_all_objects","return_type":"Hash(String, Array(String))","visibility":"Public","body":"@@current_backend.list_all_objects"},"external_var":false}],"instance_methods":[{"html_id":"delete(object:Serializable|Container)-instance-method","name":"delete","abstract":false,"args":[{"name":"object","external_name":"object","restriction":"Serializable | Container"}],"args_string":"(object : Serializable | Container)","args_html":"(object : <a href=\"../Sepia/Serializable.html\">Serializable</a> | <a href=\"../Sepia/Container.html\">Container</a>)","location":{"filename":"src/sepia/storage.cr","line_number":186,"url":null},"def":{"name":"delete","args":[{"name":"object","external_name":"object","restriction":"Serializable | Container"}],"visibility":"Public","body":"@@current_backend.delete(object)"},"external_var":false},{"html_id":"load(object_class:T.class,id:String,path:String|Nil=nil):TforallT-instance-method","name":"load","doc":"Loads an object using the current backend.\n\nGeneric method that loads an object of the specified class.\nThe type parameter ensures type safety without requiring casting.\n\n### Parameters\n\n- *object_class* : The class of object to load\n- *id* : The object's unique identifier\n- *path* : Optional custom load path\n\n### Returns\n\nAn instance of type T loaded from storage.\n\n### Example\n\n```\n# Load with explicit type\ndoc = Sepia::Storage.load(MyDocument, \"doc-uuid\")\n\n# Type is inferred, no casting needed\nputs doc.content # doc is typed as MyDocument\n```","summary":"<p>Loads an object using the current backend.</p>","abstract":false,"args":[{"name":"object_class","external_name":"object_class","restriction":"T.class"},{"name":"id","external_name":"id","restriction":"String"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"args_string":"(object_class : T.class, id : String, path : String | Nil = nil) : T forall T","args_html":"(object_class : <span class=\"t\">T</span>.<span class=\"k\">class</span>, id : String, path : String | Nil = <span class=\"n\">nil</span>) : T forall T","location":{"filename":"src/sepia/storage.cr","line_number":182,"url":null},"def":{"name":"load","args":[{"name":"object_class","external_name":"object_class","restriction":"T.class"},{"name":"id","external_name":"id","restriction":"String"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"return_type":"T","visibility":"Public","body":"(@@current_backend.load(object_class, id, path)).as(T)"},"external_var":false},{"html_id":"path:String-instance-method","name":"path","doc":"Legacy path property (only works with FileStorage)","summary":"<p>Legacy path property (only works with FileStorage)</p>","abstract":false,"location":{"filename":"src/sepia/storage.cr","line_number":191,"url":null},"def":{"name":"path","return_type":"String","visibility":"Public","body":"if @@current_backend.is_a?(FileStorage)\n  (@@current_backend.as(FileStorage)).path\nelse\n  raise(\"path property is only available with FileStorage backend\")\nend"},"external_var":false},{"html_id":"path=(path:String)-instance-method","name":"path=","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"String"}],"args_string":"(path : String)","args_html":"(path : String)","location":{"filename":"src/sepia/storage.cr","line_number":199,"url":null},"def":{"name":"path=","args":[{"name":"path","external_name":"path","restriction":"String"}],"visibility":"Public","body":"if @@current_backend.is_a?(FileStorage)\n  (@@current_backend.as(FileStorage)).path = path\nelse\n  raise(\"path property is only available with FileStorage backend\")\nend"},"external_var":false},{"html_id":"save(object:Serializable,path:String|Nil=nil)-instance-method","name":"save","doc":"Saves a Serializable object using the current backend.\n\nDelegates to the current storage backend's save method.\n\n### Parameters\n\n- *object* : The Serializable object to save\n- *path* : Optional custom save path\n\n### Example\n\n```\ndoc = MyDocument.new(\"Hello\")\nSepia::Storage.save(doc) # Uses current backend\n```","summary":"<p>Saves a Serializable object using the current backend.</p>","abstract":false,"args":[{"name":"object","external_name":"object","restriction":"Serializable"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"args_string":"(object : Serializable, path : String | Nil = nil)","args_html":"(object : <a href=\"../Sepia/Serializable.html\">Serializable</a>, path : String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/sepia/storage.cr","line_number":135,"url":null},"def":{"name":"save","args":[{"name":"object","external_name":"object","restriction":"Serializable"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"visibility":"Public","body":"@@current_backend.save(object, path)"},"external_var":false},{"html_id":"save(object:Container,path:String|Nil=nil)-instance-method","name":"save","doc":"Saves a Container object using the current backend.\n\nDelegates to the current storage backend's save method.\n\n### Parameters\n\n- *object* : The Container object to save\n- *path* : Optional custom save path\n\n### Example\n\n```\nboard = Board.new(\"My Board\")\nSepia::Storage.save(board) # Uses current backend\n```","summary":"<p>Saves a Container object using the current backend.</p>","abstract":false,"args":[{"name":"object","external_name":"object","restriction":"Container"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"args_string":"(object : Container, path : String | Nil = nil)","args_html":"(object : <a href=\"../Sepia/Container.html\">Container</a>, path : String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/sepia/storage.cr","line_number":154,"url":null},"def":{"name":"save","args":[{"name":"object","external_name":"object","restriction":"Container"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"visibility":"Public","body":"@@current_backend.save(object, path)"},"external_var":false}]},{"html_id":"Sepia/Sepia/StorageBackend","path":"Sepia/StorageBackend.html","kind":"class","full_name":"Sepia::StorageBackend","name":"StorageBackend","abstract":true,"superclass":{"html_id":"Sepia/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"Sepia/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Sepia/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/sepia/storage_backend.cr","line_number":4,"url":null}],"repository_name":"Sepia","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"Sepia/Sepia/FileStorage","kind":"class","full_name":"Sepia::FileStorage","name":"FileStorage"},{"html_id":"Sepia/Sepia/InMemoryStorage","kind":"class","full_name":"Sepia::InMemoryStorage","name":"InMemoryStorage"}],"namespace":{"html_id":"Sepia/Sepia","kind":"module","full_name":"Sepia","name":"Sepia"},"doc":"Abstract base class for storage backends.\nAll storage implementations must inherit from this class.","summary":"<p>Abstract base class for storage backends.</p>","instance_methods":[{"html_id":"clear-instance-method","name":"clear","doc":"Clear all data (useful for testing)","summary":"<p>Clear all data (useful for testing)</p>","abstract":true,"location":{"filename":"src/sepia/storage_backend.cr","line_number":30,"url":null},"def":{"name":"clear","visibility":"Public","body":""},"external_var":false},{"html_id":"count(object_class:Class):Int32-instance-method","name":"count","doc":"Count objects of a given class","summary":"<p>Count objects of a given class</p>","abstract":true,"args":[{"name":"object_class","external_name":"object_class","restriction":"Class"}],"args_string":"(object_class : Class) : Int32","args_html":"(object_class : Class) : Int32","location":{"filename":"src/sepia/storage_backend.cr","line_number":27,"url":null},"def":{"name":"count","args":[{"name":"object_class","external_name":"object_class","restriction":"Class"}],"return_type":"Int32","visibility":"Public","body":""},"external_var":false},{"html_id":"delete(class_name:String,id:String)-instance-method","name":"delete","doc":"Delete an object by its class name and ID","summary":"<p>Delete an object by its class name and ID</p>","abstract":true,"args":[{"name":"class_name","external_name":"class_name","restriction":"String"},{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(class_name : String, id : String)","args_html":"(class_name : String, id : String)","location":{"filename":"src/sepia/storage_backend.cr","line_number":18,"url":null},"def":{"name":"delete","args":[{"name":"class_name","external_name":"class_name","restriction":"String"},{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":""},"external_var":false},{"html_id":"delete(object:Serializable|Container)-instance-method","name":"delete","doc":"Delete an object","summary":"<p>Delete an object</p>","abstract":true,"args":[{"name":"object","external_name":"object","restriction":"Serializable | Container"}],"args_string":"(object : Serializable | Container)","args_html":"(object : <a href=\"../Sepia/Serializable.html\">Serializable</a> | <a href=\"../Sepia/Container.html\">Container</a>)","location":{"filename":"src/sepia/storage_backend.cr","line_number":15,"url":null},"def":{"name":"delete","args":[{"name":"object","external_name":"object","restriction":"Serializable | Container"}],"visibility":"Public","body":""},"external_var":false},{"html_id":"exists?(object_class:Class,id:String):Bool-instance-method","name":"exists?","doc":"Check if an object exists","summary":"<p>Check if an object exists</p>","abstract":true,"args":[{"name":"object_class","external_name":"object_class","restriction":"Class"},{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(object_class : Class, id : String) : Bool","args_html":"(object_class : Class, id : String) : Bool","location":{"filename":"src/sepia/storage_backend.cr","line_number":24,"url":null},"def":{"name":"exists?","args":[{"name":"object_class","external_name":"object_class","restriction":"Class"},{"name":"id","external_name":"id","restriction":"String"}],"return_type":"Bool","visibility":"Public","body":""},"external_var":false},{"html_id":"export_data:Hash(String,Array(Hash(String,String)))-instance-method","name":"export_data","doc":"Export all data as a hash structure","summary":"<p>Export all data as a hash structure</p>","abstract":true,"location":{"filename":"src/sepia/storage_backend.cr","line_number":33,"url":null},"def":{"name":"export_data","return_type":"Hash(String, Array(Hash(String, String)))","visibility":"Public","body":""},"external_var":false},{"html_id":"import_data(data:Hash(String,Array(Hash(String,String))))-instance-method","name":"import_data","doc":"Import data from a hash structure","summary":"<p>Import data from a hash structure</p>","abstract":true,"args":[{"name":"data","external_name":"data","restriction":"Hash(String, Array(Hash(String, String)))"}],"args_string":"(data : Hash(String, Array(Hash(String, String))))","args_html":"(data : Hash(String, Array(Hash(String, String))))","location":{"filename":"src/sepia/storage_backend.cr","line_number":36,"url":null},"def":{"name":"import_data","args":[{"name":"data","external_name":"data","restriction":"Hash(String, Array(Hash(String, String)))"}],"visibility":"Public","body":""},"external_var":false},{"html_id":"list_all(object_class:Class):Array(String)-instance-method","name":"list_all","doc":"List all object IDs of a given class","summary":"<p>List all object IDs of a given class</p>","abstract":true,"args":[{"name":"object_class","external_name":"object_class","restriction":"Class"}],"args_string":"(object_class : Class) : Array(String)","args_html":"(object_class : Class) : Array(String)","location":{"filename":"src/sepia/storage_backend.cr","line_number":21,"url":null},"def":{"name":"list_all","args":[{"name":"object_class","external_name":"object_class","restriction":"Class"}],"return_type":"Array(String)","visibility":"Public","body":""},"external_var":false},{"html_id":"list_all_objects:Hash(String,Array(String))-instance-method","name":"list_all_objects","doc":"List all objects, grouped by class name","summary":"<p>List all objects, grouped by class name</p>","abstract":true,"location":{"filename":"src/sepia/storage_backend.cr","line_number":39,"url":null},"def":{"name":"list_all_objects","return_type":"Hash(String, Array(String))","visibility":"Public","body":""},"external_var":false},{"html_id":"load(object_class:Class,id:String,path:String|Nil=nil):Object-instance-method","name":"load","doc":"Load an object by class and ID","summary":"<p>Load an object by class and ID</p>","abstract":true,"args":[{"name":"object_class","external_name":"object_class","restriction":"Class"},{"name":"id","external_name":"id","restriction":"String"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"args_string":"(object_class : Class, id : String, path : String | Nil = nil) : Object","args_html":"(object_class : Class, id : String, path : String | Nil = <span class=\"n\">nil</span>) : <a href=\"../Sepia/Object.html\">Object</a>","location":{"filename":"src/sepia/storage_backend.cr","line_number":12,"url":null},"def":{"name":"load","args":[{"name":"object_class","external_name":"object_class","restriction":"Class"},{"name":"id","external_name":"id","restriction":"String"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"return_type":"Object","visibility":"Public","body":""},"external_var":false},{"html_id":"save(object:Container,path:String|Nil=nil)-instance-method","name":"save","doc":"Save a Container object","summary":"<p>Save a Container object</p>","abstract":true,"args":[{"name":"object","external_name":"object","restriction":"Container"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"args_string":"(object : Container, path : String | Nil = nil)","args_html":"(object : <a href=\"../Sepia/Container.html\">Container</a>, path : String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/sepia/storage_backend.cr","line_number":9,"url":null},"def":{"name":"save","args":[{"name":"object","external_name":"object","restriction":"Container"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"visibility":"Public","body":""},"external_var":false},{"html_id":"save(object:Serializable,path:String|Nil=nil)-instance-method","name":"save","doc":"Save a Serializable object","summary":"<p>Save a Serializable object</p>","abstract":true,"args":[{"name":"object","external_name":"object","restriction":"Serializable"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"args_string":"(object : Serializable, path : String | Nil = nil)","args_html":"(object : <a href=\"../Sepia/Serializable.html\">Serializable</a>, path : String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/sepia/storage_backend.cr","line_number":6,"url":null},"def":{"name":"save","args":[{"name":"object","external_name":"object","restriction":"Serializable"},{"name":"path","default_value":"nil","external_name":"path","restriction":"String | ::Nil"}],"visibility":"Public","body":""},"external_var":false}]}]}]}})